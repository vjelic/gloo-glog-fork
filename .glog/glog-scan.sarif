{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "glog-2762031d-7e16-4e23-919f-db0a26f3dfa6",
              "name": "Win32HardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol: Win32 - Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440077"
                ]
              }
            },
            {
              "id": "glog-8fac4617-51ca-4f9c-b72f-f1abfb5485eb",
              "name": "Win32HardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol: Win32 - Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440077"
                ]
              }
            },
            {
              "id": "glog-0bdcc01b-e67c-47cb-9331-39fd19f16d17",
              "name": "Win32HardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol: Win32 - Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440077"
                ]
              }
            },
            {
              "id": "glog-9e77060a-4c77-4e56-b348-3f15f0b6ec24",
              "name": "Win32HardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol: Win32 - Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440077"
                ]
              }
            },
            {
              "id": "glog-b2fe0c57-d7f5-4ad3-97e3-3e103ed3d23c",
              "name": "Win32HardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol: Win32 - Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440077"
                ]
              }
            },
            {
              "id": "glog-9b83149d-5a52-4d53-a9e3-b1333042d35b",
              "name": "Win32HardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol: Win32 - Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440077"
                ]
              }
            },
            {
              "id": "glog-8345d03b-ef31-4b2a-a5d7-2e820fcefea2",
              "name": "OpensslDoNotHardcodeSsltlsVersionsWithinAnApplication",
              "shortDescription": {
                "text": "SSL/TLS version usage should be based on an OS or external configuration."
              },
              "fullDescription": {
                "text": "OpenSSL: Do not hardcode SSL/TLS versions within an application.: SSL/TLS version usage should be based on an OS or external configuration."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "SSL/TLS version usage should be based on an OS or external configuration.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS440010"
                ]
              }
            },
            {
              "id": "glog-c813452d-f58d-4b7e-88a6-cb8c448fe4af",
              "name": "OpensslDoNotHardcodeSsltlsVersionsWithinAnApplication",
              "shortDescription": {
                "text": "SSL/TLS version usage should be based on an OS or external configuration."
              },
              "fullDescription": {
                "text": "OpenSSL: Do not hardcode SSL/TLS versions within an application.: SSL/TLS version usage should be based on an OS or external configuration."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "SSL/TLS version usage should be based on an OS or external configuration.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS440010"
                ]
              }
            },
            {
              "id": "glog-f2627cd6-8b27-42a0-aabb-71394dd347dc",
              "name": "Win32HardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol: Win32 - Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440077"
                ]
              }
            },
            {
              "id": "glog-5c61adec-a8a1-428c-abb1-353951785172",
              "name": "Win32HardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol: Win32 - Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440077"
                ]
              }
            },
            {
              "id": "glog-d1353409-ddf1-40a2-a845-579afd8958f8",
              "name": "Win32HardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol: Win32 - Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440077"
                ]
              }
            },
            {
              "id": "glog-70b8740e-3bdd-4be0-91ca-20369c128821",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-2ed28754-e9eb-45ab-85c8-85c7994f4b9f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS162092"
                ]
              }
            },
            {
              "id": "glog-861042da-6f68-4eba-8f88-9d67ddd10553",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-fd708556-698b-4468-b1c3-ccba4336610c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-4439709d-2437-4acb-ac65-895d23e0085b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-d88d03a0-7ee3-4fed-8b51-ee05bb67e1ea",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-935de064-d4e2-4794-b989-d1b6ac893925",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-cdf61797-9c82-4924-bbd3-c6d1ae60e200",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-cd4f4efc-ea05-4c74-b47f-6dabe3a73fd1",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-6fd65e54-e56d-4248-881f-5da1fa42d7f1",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-d418e2ec-7c86-497e-a0dc-d16637888589",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-e937c7f0-fdca-4c44-ab8a-56a453b96984",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-f2bb331b-9187-409c-9bca-f1aa0f8f94c2",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-332deee3-d1fa-4daf-829b-fdf4e2d7a550",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-ba31b8ab-448b-4cfd-937a-fe1b21f2fb47",
              "name": "Win32HardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol: Win32 - Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440077"
                ]
              }
            },
            {
              "id": "glog-b311a700-d1d2-4793-a451-e2384b78a7e5",
              "name": "Win32HardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol: Win32 - Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440077"
                ]
              }
            },
            {
              "id": "glog-3fc2fbb1-7f6f-4c94-970a-4a6e79280227",
              "name": "Win32HardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol: Win32 - Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440077"
                ]
              }
            },
            {
              "id": "glog-271361b5-ff6d-4807-8e84-89b708b3cea0",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-47e53a89-c034-4e0e-996c-c9f8b9607057",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-d485467c-6f95-4db8-bd75-8bec9d9b0a54",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-f475572b-e248-4000-98b6-0341b5317000",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-74094079-c5ae-4922-8cf1-7e075fb157eb",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-c74a6afa-e696-4db6-9e45-46903416dfc2",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-faf33d2b-6e2c-45d4-a2a5-a980a117791b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-b7a87244-290c-41e5-b3f6-2a27ca9dea8a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-dc2f2aa7-ac28-4614-9250-2e6506c12439",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-c8a38b0b-929e-44aa-9618-6869b4da8943",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-3fa66991-5640-455e-a3cc-838e86ce5d1f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-99523be1-da46-4aa7-bf6e-8d105ae23b89",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-2aba1c4f-c63d-46c8-bf1d-423497140049",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-2da47d55-44a7-4fbb-b591-a5a9537004be",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-1b3702b9-e0ab-4ab2-a684-2b570e4ee127",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-7615c34e-2d86-4eaf-9d17-30f601d5e5bf",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-b168e8e0-9037-4bbb-b153-1640f3e4180b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-20859f09-7e63-4085-b242-4d8413accd34",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-d50a5a85-b837-43af-9bc1-c3f536f6c2b6",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-2cc319ac-a727-400c-b32f-302146cb18aa",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-90e266f1-67a4-4cfa-9587-c7d89b79c87d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-da32ca82-7513-40ad-ade5-94144c610025",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-146ea5e2-0d78-4ad6-b034-d5f9300b1151",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS162092"
                ]
              }
            },
            {
              "id": "glog-e82eed78-abc0-48dd-8dee-3b82de326c9c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-21cece4c-70d3-4818-8e9d-c34a756956db",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-12a9e1db-d233-4481-a091-6ad3817b87a0",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-9120bab6-3b87-4f98-934d-862920c9fcd0",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-ccf1ec3f-4004-4fef-aa4e-0ece1b1902c6",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-d4ca3e5c-8cda-4e06-878a-3d5b64b08786",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-e86fd943-5abf-4f9e-b572-0805552015c4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS162092"
                ]
              }
            },
            {
              "id": "glog-ca721073-f749-49fe-822b-44cb7fc9bc76",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS162092"
                ]
              }
            },
            {
              "id": "glog-c3f51b45-ea73-4c5a-b5b8-b023214b7d8f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS162092"
                ]
              }
            },
            {
              "id": "glog-490735ab-bd0e-4e33-9ba7-e2aa7c00b43f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-f1bc25cb-787b-4a25-8c10-f0ea9a2bf768",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-17d6e8a9-e816-41dc-8b5e-26618cb3661f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-7a8648b5-011f-455a-9057-39b560af6bad",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS162092"
                ]
              }
            },
            {
              "id": "glog-a67f7503-2936-457d-9712-80da4f3290f9",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS162092"
                ]
              }
            },
            {
              "id": "glog-d744ca34-d418-401d-9dac-a21cb32fe4ed",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS162092"
                ]
              }
            },
            {
              "id": "glog-55fa7994-1006-4a56-8598-fe9d12f2806c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS162092"
                ]
              }
            },
            {
              "id": "glog-1d4d7b76-0c91-4729-ac60-21e14845f434",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS162092"
                ]
              }
            },
            {
              "id": "glog-916ed813-4def-4308-8457-d22091460ada",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS162092"
                ]
              }
            },
            {
              "id": "glog-cc4741c5-e116-4768-bd53-7c1e24d640ab",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-55e5cc45-3962-410d-ad1d-16c9aa2a8880",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-b0c2e57d-79fa-4ae6-adea-90be0a3b240f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-65f435e6-1387-4706-aa19-7930b2400069",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-7592767a-67b3-4e1a-ac52-77508dce2638",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-126c758a-97a2-457d-ab1e-159bcef40a0d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-0f21f40f-d624-48b8-87cc-826adf7349cd",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-8564b1e9-440e-4129-ab53-42ddbc3dc652",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-17c0716d-8cf9-441a-a77b-f355c44f57ea",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-2763a016-7579-43f2-a291-43a5ba133cbc",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-2c954851-1a97-4497-b644-1abece264b5b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-c44ac30c-1628-47e2-99d9-639f8f485b00",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-0442701e-b3ff-4784-9b4d-ef6cb2a5352d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-5165a217-d83d-4ad7-bb81-a3b438b11d6e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-28236e19-c7e2-405c-b57c-dffe16eb2846",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-bd2609db-5d8c-46b0-8406-0c85c27d8e92",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-cc722f93-f752-41cd-8065-211c590ecdf1",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-ce5e7f80-0070-4181-a215-e12cb7d3f211",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-4dcacb3e-8ce1-4424-87d0-739ce6548abd",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-d451d9c1-93fd-452f-ac7a-3905524e8c33",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-32189a00-5a4e-426f-beee-5e42f21972dd",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-63e554ea-0f49-47ae-9f4c-b927b54c146e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-5fae58e0-d4b8-4e04-b79e-ca7b93c7313f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-09542c21-cde6-4659-8f42-abd0ee14e778",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-64325390-ab0c-467c-97d9-3e50d7fd7f54",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-3ed47133-e99e-4df5-9295-d9e3f54a5874",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "glog-2762031d-7e16-4e23-919f-db0a26f3dfa6",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Win32 - Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/openssl.cc"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 11,
                  "endLine": 52,
                  "endColumn": 37,
                  "charOffset": 1501,
                  "charLength": 26,
                  "snippet": {
                    "text": "SSL_CTX_set_security_level",
                    "rendered": {
                      "text": "SSL_CTX_set_security_level",
                      "markdown": "`SSL_CTX_set_security_level`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-8fac4617-51ca-4f9c-b72f-f1abfb5485eb",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Win32 - Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/openssl.cc"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 11,
                  "endLine": 34,
                  "endColumn": 22,
                  "charOffset": 996,
                  "charLength": 11,
                  "snippet": {
                    "text": "SSL_CTX_new",
                    "rendered": {
                      "text": "SSL_CTX_new",
                      "markdown": "`SSL_CTX_new`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-0bdcc01b-e67c-47cb-9331-39fd19f16d17",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Win32 - Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/openssl.cc"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 5,
                  "endLine": 51,
                  "endColumn": 31,
                  "charOffset": 1436,
                  "charLength": 26,
                  "snippet": {
                    "text": "SSL_CTX_set_security_level",
                    "rendered": {
                      "text": "SSL_CTX_set_security_level",
                      "markdown": "`SSL_CTX_set_security_level`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-9e77060a-4c77-4e56-b348-3f15f0b6ec24",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Win32 - Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/openssl.cc"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 9,
                  "endLine": 33,
                  "endColumn": 20,
                  "charOffset": 945,
                  "charLength": 11,
                  "snippet": {
                    "text": "SSL_CTX_new",
                    "rendered": {
                      "text": "SSL_CTX_new",
                      "markdown": "`SSL_CTX_new`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-b2fe0c57-d7f5-4ad3-97e3-3e103ed3d23c",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Win32 - Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/openssl.cc"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 46,
                  "endLine": 31,
                  "endColumn": 56,
                  "charOffset": 920,
                  "charLength": 10,
                  "snippet": {
                    "text": "TLS_method",
                    "rendered": {
                      "text": "TLS_method",
                      "markdown": "`TLS_method`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-9b83149d-5a52-4d53-a9e3-b1333042d35b",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Win32 - Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/context.cc"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 12,
                  "endLine": 91,
                  "endColumn": 38,
                  "charOffset": 3456,
                  "charLength": 26,
                  "snippet": {
                    "text": "SSL_CTX_set_security_level",
                    "rendered": {
                      "text": "SSL_CTX_set_security_level",
                      "markdown": "`SSL_CTX_set_security_level`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-8ff9af5e-7779-48ba-b2e8-55c9f4e08fa8",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Win32 - Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/openssl.cc"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 18,
                  "endLine": 31,
                  "endColumn": 28,
                  "charOffset": 892,
                  "charLength": 10,
                  "snippet": {
                    "text": "TLS_method",
                    "rendered": {
                      "text": "TLS_method",
                      "markdown": "`TLS_method`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-c813452d-f58d-4b7e-88a6-cb8c448fe4af",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "OpenSSL: Do not hardcode SSL/TLS versions within an application."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/context.cc"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 16,
                  "endLine": 65,
                  "endColumn": 45,
                  "charOffset": 2313,
                  "charLength": 29,
                  "snippet": {
                    "text": "SSL_CTX_set_min_proto_version",
                    "rendered": {
                      "text": "SSL_CTX_set_min_proto_version",
                      "markdown": "`SSL_CTX_set_min_proto_version`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hardcoded"
            ]
          }
        },
        {
          "ruleId": "glog-f2627cd6-8b27-42a0-aabb-71394dd347dc",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Win32 - Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/context.cc"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 16,
                  "endLine": 65,
                  "endColumn": 45,
                  "charOffset": 2313,
                  "charLength": 29,
                  "snippet": {
                    "text": "SSL_CTX_set_min_proto_version",
                    "rendered": {
                      "text": "SSL_CTX_set_min_proto_version",
                      "markdown": "`SSL_CTX_set_min_proto_version`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-5c61adec-a8a1-428c-abb1-353951785172",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Win32 - Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/context.cc"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 31,
                  "endLine": 62,
                  "endColumn": 42,
                  "charOffset": 2186,
                  "charLength": 11,
                  "snippet": {
                    "text": "SSL_CTX_new",
                    "rendered": {
                      "text": "SSL_CTX_new",
                      "markdown": "`SSL_CTX_new`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-d1353409-ddf1-40a2-a845-579afd8958f8",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Win32 - Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/context.cc"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 53,
                  "endLine": 62,
                  "endColumn": 63,
                  "charOffset": 2208,
                  "charLength": 10,
                  "snippet": {
                    "text": "TLS_method",
                    "rendered": {
                      "text": "TLS_method",
                      "markdown": "`TLS_method`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-86b1b5b3-c3e5-42d9-b052-0b88f469a7ad",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/mpi/example/main_unmanaged.cc"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 49,
                  "endLine": 23,
                  "endColumn": 58,
                  "charOffset": 561,
                  "charLength": 9,
                  "snippet": {
                    "text": "localhost",
                    "rendered": {
                      "text": "localhost",
                      "markdown": "`localhost`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-70b8740e-3bdd-4be0-91ca-20369c128821",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/broadcast_one_to_all.h"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 6,
                  "endLine": 110,
                  "endColumn": 55,
                  "charOffset": 3097,
                  "charLength": 49,
                  "snippet": {
                    "text": "memcpy(ptrs_[i], ptrs_[rootPointerRank_], bytes_)",
                    "rendered": {
                      "text": "memcpy(ptrs_[i], ptrs_[rootPointerRank_], bytes_)",
                      "markdown": "`memcpy(ptrs_[i], ptrs_[rootPointerRank_], bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/broadcast_one_to_all.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3097,
                        "charLength": 49
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptrs_[i], <size of ptrs_[i]>,  ptrs_[rootPointerRank_],  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2ed28754-e9eb-45ab-85c8-85c7994f4b9f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/mpi/example/main_managed.cc"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 49,
                  "endLine": 18,
                  "endColumn": 58,
                  "charOffset": 497,
                  "charLength": 9,
                  "snippet": {
                    "text": "localhost",
                    "rendered": {
                      "text": "localhost",
                      "markdown": "`localhost`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-861042da-6f68-4eba-8f88-9d67ddd10553",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_ring.h"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 6,
                  "endLine": 111,
                  "endColumn": 40,
                  "charOffset": 3014,
                  "charLength": 34,
                  "snippet": {
                    "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                    "rendered": {
                      "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                      "markdown": "`memcpy(ptrs_[i], ptrs_[0], bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_ring.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3014,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptrs_[i], <size of ptrs_[i]>,  ptrs_[0],  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-fd708556-698b-4468-b1c3-ccba4336610c",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_ring.h"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 8,
                  "endLine": 98,
                  "endColumn": 39,
                  "charOffset": 2657,
                  "charLength": 31,
                  "snippet": {
                    "text": "memcpy(outbox_, inbox_, bytes_)",
                    "rendered": {
                      "text": "memcpy(outbox_, inbox_, bytes_)",
                      "markdown": "`memcpy(outbox_, inbox_, bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_ring.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2657,
                        "charLength": 31
                      },
                      "insertedContent": {
                        "text": "memcpy_s(outbox_, <size of outbox_>,  inbox_,  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-4439709d-2437-4acb-ac65-895d23e0085b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_ring.h"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 30,
                  "endLine": 33,
                  "endColumn": 44,
                  "charOffset": 804,
                  "charLength": 14,
                  "snippet": {
                    "text": "malloc(bytes_)",
                    "rendered": {
                      "text": "malloc(bytes_)",
                      "markdown": "`malloc(bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_ring.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 804,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d88d03a0-7ee3-4fed-8b51-ee05bb67e1ea",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_ring.h"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 29,
                  "endLine": 32,
                  "endColumn": 43,
                  "charOffset": 757,
                  "charLength": 14,
                  "snippet": {
                    "text": "malloc(bytes_)",
                    "rendered": {
                      "text": "malloc(bytes_)",
                      "markdown": "`malloc(bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_ring.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 757,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-935de064-d4e2-4794-b989-d1b6ac893925",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_ring.h"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 4,
                  "endLine": 80,
                  "endColumn": 37,
                  "charOffset": 2129,
                  "charLength": 33,
                  "snippet": {
                    "text": "memcpy(outbox_, ptrs_[0], bytes_)",
                    "rendered": {
                      "text": "memcpy(outbox_, ptrs_[0], bytes_)",
                      "markdown": "`memcpy(outbox_, ptrs_[0], bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_ring.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2129,
                        "charLength": 33
                      },
                      "insertedContent": {
                        "text": "memcpy_s(outbox_, <size of outbox_>,  ptrs_[0],  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-cdf61797-9c82-4924-bbd3-c6d1ae60e200",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/uv/libuv.h"
                },
                "region": {
                  "startLine": 638,
                  "startColumn": 9,
                  "endLine": 638,
                  "endColumn": 41,
                  "charOffset": 15723,
                  "charLength": 32,
                  "snippet": {
                    "text": "memcpy(data.get(), &t, sizeof(T)",
                    "rendered": {
                      "text": "memcpy(data.get(), &t, sizeof(T)",
                      "markdown": "`memcpy(data.get(), &t, sizeof(T)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/uv/libuv.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 15723,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "memcpy_s(data.get(), <size of data.get()>,  &t,  sizeof(T)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-cd4f4efc-ea05-4c74-b47f-6dabe3a73fd1",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/reduce.cc"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 6,
                  "endLine": 56,
                  "endColumn": 65,
                  "charOffset": 1777,
                  "charLength": 59,
                  "snippet": {
                    "text": "memcpy(out->ptr, in->ptr, opts.elements * opts.elementSize)",
                    "rendered": {
                      "text": "memcpy(out->ptr, in->ptr, opts.elements * opts.elementSize)",
                      "markdown": "`memcpy(out->ptr, in->ptr, opts.elements * opts.elementSize)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/reduce.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1777,
                        "charLength": 59
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out->ptr, <size of out->ptr>,  in->ptr,  opts.elements * opts.elementSize)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-6fd65e54-e56d-4248-881f-5da1fa42d7f1",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allgather_ring.h"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 6,
                  "endLine": 63,
                  "endColumn": 76,
                  "charOffset": 1999,
                  "charLength": 70,
                  "snippet": {
                    "text": "memcpy(outPtr_ + rank * inputStride_ + i * count_, inPtrs_[i], bytes_)",
                    "rendered": {
                      "text": "memcpy(outPtr_ + rank * inputStride_ + i * count_, inPtrs_[i], bytes_)",
                      "markdown": "`memcpy(outPtr_ + rank * inputStride_ + i * count_, inPtrs_[i], bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allgather_ring.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1999,
                        "charLength": 70
                      },
                      "insertedContent": {
                        "text": "memcpy_s(outPtr_ + rank * inputStride_ + i * count_, <size of outPtr_ + rank * inputStride_ + i * count_>,  inPtrs_[i],  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d418e2ec-7c86-497e-a0dc-d16637888589",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/reduce_scatter.h"
                },
                "region": {
                  "startLine": 426,
                  "startColumn": 6,
                  "endLine": 426,
                  "endColumn": 40,
                  "charOffset": 15530,
                  "charLength": 34,
                  "snippet": {
                    "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                    "rendered": {
                      "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                      "markdown": "`memcpy(ptrs_[i], ptrs_[0], bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/reduce_scatter.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 15530,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptrs_[i], <size of ptrs_[i]>,  ptrs_[0],  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e937c7f0-fdca-4c44-ab8a-56a453b96984",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/reduce_scatter.h"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 10,
                  "endLine": 418,
                  "endColumn": 43,
                  "charOffset": 15253,
                  "charLength": 131,
                  "snippet": {
                    "text": "memcpy(\n              &ptrs_[0][bufferOffset],\n              &ptrs_[0][distMap.offset],\n              distMap.itemCount * sizeof(T)",
                    "rendered": {
                      "text": "memcpy(\n              &ptrs_[0][bufferOffset],\n              &ptrs_[0][distMap.offset],\n              distMap.itemCount * sizeof(T)",
                      "markdown": "`memcpy(\n              &ptrs_[0][bufferOffset],\n              &ptrs_[0][distMap.offset],\n              distMap.itemCount * sizeof(T)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/reduce_scatter.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 15253,
                        "charLength": 131
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n              &ptrs_[0][bufferOffset], <size of \n              &ptrs_[0][bufferOffset]>, \n              &ptrs_[0][distMap.offset], \n              distMap.itemCount * sizeof(T)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f2bb331b-9187-409c-9bca-f1aa0f8f94c2",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/reduce_scatter.h"
                },
                "region": {
                  "startLine": 408,
                  "startColumn": 8,
                  "endLine": 411,
                  "endColumn": 41,
                  "charOffset": 14973,
                  "charLength": 129,
                  "snippet": {
                    "text": "memcpy(\n            &ptrs_[0][bufferOffset],\n            &recvBufDist_[distMap.offset],\n            distMap.itemCount * sizeof(T)",
                    "rendered": {
                      "text": "memcpy(\n            &ptrs_[0][bufferOffset],\n            &recvBufDist_[distMap.offset],\n            distMap.itemCount * sizeof(T)",
                      "markdown": "`memcpy(\n            &ptrs_[0][bufferOffset],\n            &recvBufDist_[distMap.offset],\n            distMap.itemCount * sizeof(T)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/reduce_scatter.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 14973,
                        "charLength": 129
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n            &ptrs_[0][bufferOffset], <size of \n            &ptrs_[0][bufferOffset]>, \n            &recvBufDist_[distMap.offset], \n            distMap.itemCount * sizeof(T)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-332deee3-d1fa-4daf-829b-fdf4e2d7a550",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/reduce_scatter.h"
                },
                "region": {
                  "startLine": 333,
                  "startColumn": 8,
                  "endLine": 333,
                  "endColumn": 42,
                  "charOffset": 12310,
                  "charLength": 34,
                  "snippet": {
                    "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                    "rendered": {
                      "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                      "markdown": "`memcpy(ptrs_[i], ptrs_[0], bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/reduce_scatter.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12310,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptrs_[i], <size of ptrs_[i]>,  ptrs_[0],  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ba31b8ab-448b-4cfd-937a-fe1b21f2fb47",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Win32 - Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/openssl.h"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 5,
                  "endLine": 32,
                  "endColumn": 31,
                  "charOffset": 773,
                  "charLength": 26,
                  "snippet": {
                    "text": "SSL_CTX_set_security_level",
                    "rendered": {
                      "text": "SSL_CTX_set_security_level",
                      "markdown": "`SSL_CTX_set_security_level`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-b311a700-d1d2-4793-a451-e2384b78a7e5",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Win32 - Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/openssl.h"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 9,
                  "endLine": 22,
                  "endColumn": 20,
                  "charOffset": 501,
                  "charLength": 11,
                  "snippet": {
                    "text": "SSL_CTX_new",
                    "rendered": {
                      "text": "SSL_CTX_new",
                      "markdown": "`SSL_CTX_new`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-3fc2fbb1-7f6f-4c94-970a-4a6e79280227",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Win32 - Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/openssl.h"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 18,
                  "endLine": 20,
                  "endColumn": 28,
                  "charOffset": 473,
                  "charLength": 10,
                  "snippet": {
                    "text": "TLS_method",
                    "rendered": {
                      "text": "TLS_method",
                      "markdown": "`TLS_method`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-271361b5-ff6d-4807-8e84-89b708b3cea0",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/cuda_collectives_native.h"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 9,
                  "endLine": 57,
                  "endColumn": 17,
                  "charOffset": 1698,
                  "charLength": 8,
                  "snippet": {
                    "text": "shuffle(",
                    "rendered": {
                      "text": "shuffle(",
                      "markdown": "`shuffle(`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-47e53a89-c034-4e0e-996c-c9f8b9607057",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_ring_chunked.h"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 6,
                  "endLine": 210,
                  "endColumn": 40,
                  "charOffset": 6946,
                  "charLength": 34,
                  "snippet": {
                    "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                    "rendered": {
                      "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                      "markdown": "`memcpy(ptrs_[i], ptrs_[0], bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_ring_chunked.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6946,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptrs_[i], <size of ptrs_[i]>,  ptrs_[0],  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d485467c-6f95-4db8-bd75-8bec9d9b0a54",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_ring_chunked.h"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 8,
                  "endLine": 184,
                  "endColumn": 77,
                  "charOffset": 6071,
                  "charLength": 69,
                  "snippet": {
                    "text": "memcpy(&ptrs_[0][offset], inbox_[chunkOffset & 1], length * sizeof(T)",
                    "rendered": {
                      "text": "memcpy(&ptrs_[0][offset], inbox_[chunkOffset & 1], length * sizeof(T)",
                      "markdown": "`memcpy(&ptrs_[0][offset], inbox_[chunkOffset & 1], length * sizeof(T)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_ring_chunked.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6071,
                        "charLength": 69
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&ptrs_[0][offset], <size of &ptrs_[0][offset]>,  inbox_[chunkOffset & 1],  length * sizeof(T)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f475572b-e248-4000-98b6-0341b5317000",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_ring_chunked.h"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 8,
                  "endLine": 96,
                  "endColumn": 42,
                  "charOffset": 2696,
                  "charLength": 34,
                  "snippet": {
                    "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                    "rendered": {
                      "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                      "markdown": "`memcpy(ptrs_[i], ptrs_[0], bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_ring_chunked.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2696,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptrs_[i], <size of ptrs_[i]>,  ptrs_[0],  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-74094079-c5ae-4922-8cf1-7e075fb157eb",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_ring_chunked.h"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 34,
                  "endLine": 44,
                  "endColumn": 48,
                  "charOffset": 1206,
                  "charLength": 14,
                  "snippet": {
                    "text": "malloc(bytes_)",
                    "rendered": {
                      "text": "malloc(bytes_)",
                      "markdown": "`malloc(bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_ring_chunked.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1206,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-c74a6afa-e696-4db6-9e45-46903416dfc2",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/alltoallv.cc"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 2,
                  "endLine": 145,
                  "endColumn": 18,
                  "charOffset": 4678,
                  "charLength": 124,
                  "snippet": {
                    "text": "memcpy(\n      static_cast<char*>(out->ptr) + myOutOffset,\n      static_cast<char*>(in->ptr) + myInOffset,\n      myChunkSize)",
                    "rendered": {
                      "text": "memcpy(\n      static_cast<char*>(out->ptr) + myOutOffset,\n      static_cast<char*>(in->ptr) + myInOffset,\n      myChunkSize)",
                      "markdown": "`memcpy(\n      static_cast<char*>(out->ptr) + myOutOffset,\n      static_cast<char*>(in->ptr) + myInOffset,\n      myChunkSize)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/alltoallv.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4678,
                        "charLength": 124
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n      static_cast<char*>(out->ptr) + myOutOffset, <size of \n      static_cast<char*>(out->ptr) + myOutOffset>, \n      static_cast<char*>(in->ptr) + myInOffset, \n      myChunkSize)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-faf33d2b-6e2c-45d4-a2a5-a980a117791b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/gatherv.cc"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 10,
                  "endLine": 97,
                  "endColumn": 23,
                  "charOffset": 2799,
                  "charLength": 107,
                  "snippet": {
                    "text": "memcpy(\n              static_cast<char*>(out->ptr) + offset,\n              in->ptr,\n              in->size)",
                    "rendered": {
                      "text": "memcpy(\n              static_cast<char*>(out->ptr) + offset,\n              in->ptr,\n              in->size)",
                      "markdown": "`memcpy(\n              static_cast<char*>(out->ptr) + offset,\n              in->ptr,\n              in->size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/gatherv.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2799,
                        "charLength": 107
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n              static_cast<char*>(out->ptr) + offset, <size of \n              static_cast<char*>(out->ptr) + offset>, \n              in->ptr, \n              in->size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b7a87244-290c-41e5-b3f6-2a27ca9dea8a",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/cuda_private.h"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 19,
                  "endLine": 84,
                  "endColumn": 27,
                  "charOffset": 2284,
                  "charLength": 8,
                  "snippet": {
                    "text": "rand() %",
                    "rendered": {
                      "text": "rand() %",
                      "markdown": "`rand() %`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-dc2f2aa7-ac28-4614-9250-2e6506c12439",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/cuda_private.h"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 19,
                  "endLine": 84,
                  "endColumn": 24,
                  "charOffset": 2284,
                  "charLength": 5,
                  "snippet": {
                    "text": "rand(",
                    "rendered": {
                      "text": "rand(",
                      "markdown": "`rand(`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-c8a38b0b-929e-44aa-9618-6869b4da8943",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/uv/device.cc"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 4,
                  "endLine": 142,
                  "endColumn": 54,
                  "charOffset": 3362,
                  "charLength": 50,
                  "snippet": {
                    "text": "memcpy(&attr.ai_addr, rp->ai_addr, rp->ai_addrlen)",
                    "rendered": {
                      "text": "memcpy(&attr.ai_addr, rp->ai_addr, rp->ai_addrlen)",
                      "markdown": "`memcpy(&attr.ai_addr, rp->ai_addr, rp->ai_addrlen)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/uv/device.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3362,
                        "charLength": 50
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&attr.ai_addr, <size of &attr.ai_addr>,  rp->ai_addr,  rp->ai_addrlen)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-3fa66991-5640-455e-a3cc-838e86ce5d1f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/uv/device.cc"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 8,
                  "endLine": 96,
                  "endColumn": 74,
                  "charOffset": 2309,
                  "charLength": 66,
                  "snippet": {
                    "text": "memcpy(&attr->ai_addr, &address.address6, sizeof(address.address6)",
                    "rendered": {
                      "text": "memcpy(&attr->ai_addr, &address.address6, sizeof(address.address6)",
                      "markdown": "`memcpy(&attr->ai_addr, &address.address6, sizeof(address.address6)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/uv/device.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2309,
                        "charLength": 66
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&attr->ai_addr, <size of &attr->ai_addr>,  &address.address6,  sizeof(address.address6)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-99523be1-da46-4aa7-bf6e-8d105ae23b89",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/uv/device.cc"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 8,
                  "endLine": 89,
                  "endColumn": 74,
                  "charOffset": 2038,
                  "charLength": 66,
                  "snippet": {
                    "text": "memcpy(&attr->ai_addr, &address.address4, sizeof(address.address4)",
                    "rendered": {
                      "text": "memcpy(&attr->ai_addr, &address.address4, sizeof(address.address4)",
                      "markdown": "`memcpy(&attr->ai_addr, &address.address4, sizeof(address.address4)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/uv/device.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2038,
                        "charLength": 66
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&attr->ai_addr, <size of &attr->ai_addr>,  &address.address4,  sizeof(address.address4)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2aba1c4f-c63d-46c8-bf1d-423497140049",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_bcube.h"
                },
                "region": {
                  "startLine": 423,
                  "startColumn": 6,
                  "endLine": 423,
                  "endColumn": 40,
                  "charOffset": 14800,
                  "charLength": 34,
                  "snippet": {
                    "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                    "rendered": {
                      "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                      "markdown": "`memcpy(ptrs_[i], ptrs_[0], bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_bcube.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 14800,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptrs_[i], <size of ptrs_[i]>,  ptrs_[0],  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2da47d55-44a7-4fbb-b591-a5a9537004be",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_bcube.h"
                },
                "region": {
                  "startLine": 405,
                  "startColumn": 13,
                  "endLine": 408,
                  "endColumn": 33,
                  "charOffset": 14249,
                  "charLength": 124,
                  "snippet": {
                    "text": "memcpy(\n            &ptrs_[0][ptrOffset],\n            &recvBufs_[recvBufIdx_[srcRank]][0],\n            recvCount * sizeof(T)",
                    "rendered": {
                      "text": "memcpy(\n            &ptrs_[0][ptrOffset],\n            &recvBufs_[recvBufIdx_[srcRank]][0],\n            recvCount * sizeof(T)",
                      "markdown": "`memcpy(\n            &ptrs_[0][ptrOffset],\n            &recvBufs_[recvBufIdx_[srcRank]][0],\n            recvCount * sizeof(T)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_bcube.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 14249,
                        "charLength": 124
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n            &ptrs_[0][ptrOffset], <size of \n            &ptrs_[0][ptrOffset]>, \n            &recvBufs_[recvBufIdx_[srcRank]][0], \n            recvCount * sizeof(T)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-1b3702b9-e0ab-4ab2-a684-2b570e4ee127",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_bcube.h"
                },
                "region": {
                  "startLine": 350,
                  "startColumn": 8,
                  "endLine": 350,
                  "endColumn": 42,
                  "charOffset": 12135,
                  "charLength": 34,
                  "snippet": {
                    "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                    "rendered": {
                      "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                      "markdown": "`memcpy(ptrs_[i], ptrs_[0], bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_bcube.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12135,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptrs_[i], <size of ptrs_[i]>,  ptrs_[0],  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-7615c34e-2d86-4eaf-9d17-30f601d5e5bf",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/uv/address.cc"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 15,
                  "endLine": 72,
                  "endColumn": 26,
                  "charOffset": 1785,
                  "charLength": 11,
                  "snippet": {
                    "text": "strlen(str)",
                    "rendered": {
                      "text": "strlen(str)",
                      "markdown": "`strlen(str)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/uv/address.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1785,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strlen_s(str, <size of str>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/uv/address.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1785,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strnlen(str, <size of str>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b168e8e0-9037-4bbb-b153-1640f3e4180b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/uv/address.cc"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 2,
                  "endLine": 37,
                  "endColumn": 44,
                  "charOffset": 863,
                  "charLength": 42,
                  "snippet": {
                    "text": "memcpy(bytes.data(), &impl_, sizeof(impl_)",
                    "rendered": {
                      "text": "memcpy(bytes.data(), &impl_, sizeof(impl_)",
                      "markdown": "`memcpy(bytes.data(), &impl_, sizeof(impl_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/uv/address.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 863,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "memcpy_s(bytes.data(), <size of bytes.data()>,  &impl_,  sizeof(impl_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-20859f09-7e63-4085-b242-4d8413accd34",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/uv/address.cc"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 2,
                  "endLine": 28,
                  "endColumn": 44,
                  "charOffset": 598,
                  "charLength": 42,
                  "snippet": {
                    "text": "memcpy(&impl_, bytes.data(), sizeof(impl_)",
                    "rendered": {
                      "text": "memcpy(&impl_, bytes.data(), sizeof(impl_)",
                      "markdown": "`memcpy(&impl_, bytes.data(), sizeof(impl_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/uv/address.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 598,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&impl_, <size of &impl_>,  bytes.data(),  sizeof(impl_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d50a5a85-b837-43af-9bc1-c3f536f6c2b6",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce.cc"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 6,
                  "endLine": 92,
                  "endColumn": 17,
                  "charOffset": 3041,
                  "charLength": 141,
                  "snippet": {
                    "text": "memcpy(\n          static_cast<uint8_t*>(out[i]->ptr) + offset,\n          static_cast<const uint8_t*>(out[0]->ptr) + offset,\n          length)",
                    "rendered": {
                      "text": "memcpy(\n          static_cast<uint8_t*>(out[i]->ptr) + offset,\n          static_cast<const uint8_t*>(out[0]->ptr) + offset,\n          length)",
                      "markdown": "`memcpy(\n          static_cast<uint8_t*>(out[i]->ptr) + offset,\n          static_cast<const uint8_t*>(out[0]->ptr) + offset,\n          length)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3041,
                        "charLength": 141
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n          static_cast<uint8_t*>(out[i]->ptr) + offset, <size of \n          static_cast<uint8_t*>(out[i]->ptr) + offset>, \n          static_cast<const uint8_t*>(out[0]->ptr) + offset, \n          length)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2cc319ac-a727-400c-b32f-302146cb18aa",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce.cc"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 8,
                  "endLine": 55,
                  "endColumn": 19,
                  "charOffset": 1584,
                  "charLength": 146,
                  "snippet": {
                    "text": "memcpy(\n            static_cast<uint8_t*>(out[0]->ptr) + offset,\n            static_cast<const uint8_t*>(in[0]->ptr) + offset,\n            length)",
                    "rendered": {
                      "text": "memcpy(\n            static_cast<uint8_t*>(out[0]->ptr) + offset,\n            static_cast<const uint8_t*>(in[0]->ptr) + offset,\n            length)",
                      "markdown": "`memcpy(\n            static_cast<uint8_t*>(out[0]->ptr) + offset,\n            static_cast<const uint8_t*>(in[0]->ptr) + offset,\n            length)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1584,
                        "charLength": 146
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n            static_cast<uint8_t*>(out[0]->ptr) + offset, <size of \n            static_cast<uint8_t*>(out[0]->ptr) + offset>, \n            static_cast<const uint8_t*>(in[0]->ptr) + offset, \n            length)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-90e266f1-67a4-4cfa-9587-c7d89b79c87d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/mpi/context.cc"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 4,
                  "endLine": 143,
                  "endColumn": 58,
                  "charOffset": 3773,
                  "charLength": 54,
                  "snippet": {
                    "text": "memcpy(address.data(), out.data() + offset, maxLength)",
                    "rendered": {
                      "text": "memcpy(address.data(), out.data() + offset, maxLength)",
                      "markdown": "`memcpy(address.data(), out.data() + offset, maxLength)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/mpi/context.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3773,
                        "charLength": 54
                      },
                      "insertedContent": {
                        "text": "memcpy_s(address.data(), <size of address.data()>,  out.data() + offset,  maxLength)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-da32ca82-7513-40ad-ade5-94144c610025",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/mpi/context.cc"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 4,
                  "endLine": 125,
                  "endColumn": 70,
                  "charOffset": 3265,
                  "charLength": 66,
                  "snippet": {
                    "text": "memcpy(in.data() + (i * maxLength), address.data(), address.size()",
                    "rendered": {
                      "text": "memcpy(in.data() + (i * maxLength), address.data(), address.size()",
                      "markdown": "`memcpy(in.data() + (i * maxLength), address.data(), address.size()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/mpi/context.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3265,
                        "charLength": 66
                      },
                      "insertedContent": {
                        "text": "memcpy_s(in.data() + (i * maxLength), <size of in.data() + (i * maxLength)>,  address.data(),  address.size()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-146ea5e2-0d78-4ad6-b034-d5f9300b1151",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/looks_like_mpi.cc"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 49,
                  "endLine": 199,
                  "endColumn": 58,
                  "charOffset": 4735,
                  "charLength": 9,
                  "snippet": {
                    "text": "localhost",
                    "rendered": {
                      "text": "localhost",
                      "markdown": "`localhost`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-e82eed78-abc0-48dd-8dee-3b82de326c9c",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/common/linux.cc"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 2,
                  "endLine": 255,
                  "endColumn": 43,
                  "charOffset": 6233,
                  "charLength": 41,
                  "snippet": {
                    "text": "memcpy(ifr.ifr_name, ifname.c_str(), len)",
                    "rendered": {
                      "text": "memcpy(ifr.ifr_name, ifname.c_str(), len)",
                      "markdown": "`memcpy(ifr.ifr_name, ifname.c_str(), len)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/common/linux.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6233,
                        "charLength": 41
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ifr.ifr_name, <size of ifr.ifr_name>,  ifname.c_str(),  len)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-21cece4c-70d3-4818-8e9d-c34a756956db",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/ibverbs/memory_region.cc"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 2,
                  "endLine": 30,
                  "endColumn": 33,
                  "charOffset": 745,
                  "charLength": 31,
                  "snippet": {
                    "text": "memcpy(&src_, src, sizeof(src_)",
                    "rendered": {
                      "text": "memcpy(&src_, src, sizeof(src_)",
                      "markdown": "`memcpy(&src_, src, sizeof(src_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/ibverbs/memory_region.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 745,
                        "charLength": 31
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&src_, <size of &src_>,  src,  sizeof(src_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-12a9e1db-d233-4481-a091-6ad3817b87a0",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/ibverbs/address.cc"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 2,
                  "endLine": 27,
                  "endColumn": 44,
                  "charOffset": 553,
                  "charLength": 42,
                  "snippet": {
                    "text": "memcpy(&addr_, bytes.data(), sizeof(addr_)",
                    "rendered": {
                      "text": "memcpy(&addr_, bytes.data(), sizeof(addr_)",
                      "markdown": "`memcpy(&addr_, bytes.data(), sizeof(addr_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/ibverbs/address.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 553,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&addr_, <size of &addr_>,  bytes.data(),  sizeof(addr_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-5f1d830c-0a13-4202-9e96-490e71426517",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/ibverbs/address.cc"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 2,
                  "endLine": 32,
                  "endColumn": 44,
                  "charOffset": 688,
                  "charLength": 42,
                  "snippet": {
                    "text": "memcpy(bytes.data(), &addr_, sizeof(addr_)",
                    "rendered": {
                      "text": "memcpy(bytes.data(), &addr_, sizeof(addr_)",
                      "markdown": "`memcpy(bytes.data(), &addr_, sizeof(addr_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/ibverbs/address.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 688,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "memcpy_s(bytes.data(), <size of bytes.data()>,  &addr_,  sizeof(addr_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-9120bab6-3b87-4f98-934d-862920c9fcd0",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/broadcast.cc"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 4,
                  "endLine": 88,
                  "endColumn": 40,
                  "charOffset": 2621,
                  "charLength": 36,
                  "snippet": {
                    "text": "memcpy(out->ptr, in->ptr, out->size)",
                    "rendered": {
                      "text": "memcpy(out->ptr, in->ptr, out->size)",
                      "markdown": "`memcpy(out->ptr, in->ptr, out->size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/broadcast.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2621,
                        "charLength": 36
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out->ptr, <size of out->ptr>,  in->ptr,  out->size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ccf1ec3f-4004-4fef-aa4e-0ece1b1902c6",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/example_allreduce.cc"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 41,
                  "endLine": 130,
                  "endColumn": 59,
                  "charOffset": 4671,
                  "charLength": 18,
                  "snippet": {
                    "text": "malloc(sizeof(int)",
                    "rendered": {
                      "text": "malloc(sizeof(int)",
                      "markdown": "`malloc(sizeof(int)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/examples/example_allreduce.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4671,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d4ca3e5c-8cda-4e06-878a-3d5b64b08786",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/example_allreduce.cc"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 40,
                  "endLine": 127,
                  "endColumn": 58,
                  "charOffset": 4543,
                  "charLength": 18,
                  "snippet": {
                    "text": "malloc(sizeof(int)",
                    "rendered": {
                      "text": "malloc(sizeof(int)",
                      "markdown": "`malloc(sizeof(int)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/examples/example_allreduce.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4543,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e86fd943-5abf-4f9e-b572-0805552015c4",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/example_allreduce.cc"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 54,
                  "endLine": 86,
                  "endColumn": 63,
                  "charOffset": 2679,
                  "charLength": 9,
                  "snippet": {
                    "text": "localhost",
                    "rendered": {
                      "text": "localhost",
                      "markdown": "`localhost`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-ca721073-f749-49fe-822b-44cb7fc9bc76",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/example_allreduce.cc"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 44,
                  "endLine": 82,
                  "endColumn": 53,
                  "charOffset": 2492,
                  "charLength": 9,
                  "snippet": {
                    "text": "127.0.0.1",
                    "rendered": {
                      "text": "127.0.0.1",
                      "markdown": "`127.0.0.1`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-c3f51b45-ea73-4c5a-b5b8-b023214b7d8f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/example_allreduce.cc"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 15,
                  "endLine": 82,
                  "endColumn": 24,
                  "charOffset": 2463,
                  "charLength": 9,
                  "snippet": {
                    "text": "localhost",
                    "rendered": {
                      "text": "localhost",
                      "markdown": "`localhost`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-490735ab-bd0e-4e33-9ba7-e2aa7c00b43f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/example_reduce.cc"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 47,
                  "endLine": 124,
                  "endColumn": 65,
                  "charOffset": 4501,
                  "charLength": 18,
                  "snippet": {
                    "text": "malloc(sizeof(int)",
                    "rendered": {
                      "text": "malloc(sizeof(int)",
                      "markdown": "`malloc(sizeof(int)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/examples/example_reduce.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4501,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f1bc25cb-787b-4a25-8c10-f0ea9a2bf768",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/ibverbs/pair.cc"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 22,
                  "endLine": 101,
                  "endColumn": 27,
                  "charOffset": 2918,
                  "charLength": 5,
                  "snippet": {
                    "text": "rand(",
                    "rendered": {
                      "text": "rand(",
                      "markdown": "`rand(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-17d6e8a9-e816-41dc-8b5e-26618cb3661f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/example_reduce.cc"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 46,
                  "endLine": 123,
                  "endColumn": 64,
                  "charOffset": 4428,
                  "charLength": 18,
                  "snippet": {
                    "text": "malloc(sizeof(int)",
                    "rendered": {
                      "text": "malloc(sizeof(int)",
                      "markdown": "`malloc(sizeof(int)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/examples/example_reduce.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4428,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-7a8648b5-011f-455a-9057-39b560af6bad",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/example_reduce.cc"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 54,
                  "endLine": 86,
                  "endColumn": 63,
                  "charOffset": 2694,
                  "charLength": 9,
                  "snippet": {
                    "text": "localhost",
                    "rendered": {
                      "text": "localhost",
                      "markdown": "`localhost`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-a67f7503-2936-457d-9712-80da4f3290f9",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/example_reduce.cc"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 44,
                  "endLine": 82,
                  "endColumn": 53,
                  "charOffset": 2507,
                  "charLength": 9,
                  "snippet": {
                    "text": "127.0.0.1",
                    "rendered": {
                      "text": "127.0.0.1",
                      "markdown": "`127.0.0.1`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-d744ca34-d418-401d-9dac-a21cb32fe4ed",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/example_reduce.cc"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 15,
                  "endLine": 82,
                  "endColumn": 24,
                  "charOffset": 2478,
                  "charLength": 9,
                  "snippet": {
                    "text": "localhost",
                    "rendered": {
                      "text": "localhost",
                      "markdown": "`localhost`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-55fa7994-1006-4a56-8598-fe9d12f2806c",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/example1.cc"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 44,
                  "endLine": 67,
                  "endColumn": 53,
                  "charOffset": 2069,
                  "charLength": 9,
                  "snippet": {
                    "text": "127.0.0.1",
                    "rendered": {
                      "text": "127.0.0.1",
                      "markdown": "`127.0.0.1`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-1d4d7b76-0c91-4729-ac60-21e14845f434",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/example1.cc"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 54,
                  "endLine": 71,
                  "endColumn": 63,
                  "charOffset": 2256,
                  "charLength": 9,
                  "snippet": {
                    "text": "localhost",
                    "rendered": {
                      "text": "localhost",
                      "markdown": "`localhost`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-916ed813-4def-4308-8457-d22091460ada",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/example1.cc"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 15,
                  "endLine": 67,
                  "endColumn": 24,
                  "charOffset": 2040,
                  "charLength": 9,
                  "snippet": {
                    "text": "localhost",
                    "rendered": {
                      "text": "localhost",
                      "markdown": "`localhost`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-cc4741c5-e116-4768-bd53-7c1e24d640ab",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/alltoall.cc"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 2,
                  "endLine": 40,
                  "endColumn": 16,
                  "charOffset": 992,
                  "charLength": 137,
                  "snippet": {
                    "text": "memcpy(\n      static_cast<char*>(out->ptr) + myRank * chunkSize,\n      static_cast<char*>(in->ptr) + myRank * chunkSize,\n      chunkSize)",
                    "rendered": {
                      "text": "memcpy(\n      static_cast<char*>(out->ptr) + myRank * chunkSize,\n      static_cast<char*>(in->ptr) + myRank * chunkSize,\n      chunkSize)",
                      "markdown": "`memcpy(\n      static_cast<char*>(out->ptr) + myRank * chunkSize,\n      static_cast<char*>(in->ptr) + myRank * chunkSize,\n      chunkSize)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/alltoall.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 992,
                        "charLength": 137
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n      static_cast<char*>(out->ptr) + myRank * chunkSize, <size of \n      static_cast<char*>(out->ptr) + myRank * chunkSize>, \n      static_cast<char*>(in->ptr) + myRank * chunkSize, \n      chunkSize)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-55e5cc45-3962-410d-ad1d-16c9aa2a8880",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/device.cc"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 8,
                  "endLine": 71,
                  "endColumn": 61,
                  "charOffset": 1994,
                  "charLength": 53,
                  "snippet": {
                    "text": "memcpy(&attr.ai_addr, ifa->ifa_addr, attr.ai_addrlen)",
                    "rendered": {
                      "text": "memcpy(&attr.ai_addr, ifa->ifa_addr, attr.ai_addrlen)",
                      "markdown": "`memcpy(&attr.ai_addr, ifa->ifa_addr, attr.ai_addrlen)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/tcp/device.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1994,
                        "charLength": 53
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&attr.ai_addr, <size of &attr.ai_addr>,  ifa->ifa_addr,  attr.ai_addrlen)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b0c2e57d-79fa-4ae6-adea-90be0a3b240f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/device.cc"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 4,
                  "endLine": 119,
                  "endColumn": 54,
                  "charOffset": 3267,
                  "charLength": 50,
                  "snippet": {
                    "text": "memcpy(&attr.ai_addr, rp->ai_addr, rp->ai_addrlen)",
                    "rendered": {
                      "text": "memcpy(&attr.ai_addr, rp->ai_addr, rp->ai_addrlen)",
                      "markdown": "`memcpy(&attr.ai_addr, rp->ai_addr, rp->ai_addrlen)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/tcp/device.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3267,
                        "charLength": 50
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&attr.ai_addr, <size of &attr.ai_addr>,  rp->ai_addr,  rp->ai_addrlen)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-65f435e6-1387-4706-aa19-7930b2400069",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/device.cc"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 8,
                  "endLine": 56,
                  "endColumn": 61,
                  "charOffset": 1518,
                  "charLength": 53,
                  "snippet": {
                    "text": "memcpy(&attr.ai_addr, ifa->ifa_addr, attr.ai_addrlen)",
                    "rendered": {
                      "text": "memcpy(&attr.ai_addr, ifa->ifa_addr, attr.ai_addrlen)",
                      "markdown": "`memcpy(&attr.ai_addr, ifa->ifa_addr, attr.ai_addrlen)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/tcp/device.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1518,
                        "charLength": 53
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&attr.ai_addr, <size of &attr.ai_addr>,  ifa->ifa_addr,  attr.ai_addrlen)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-7592767a-67b3-4e1a-ac52-77508dce2638",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/device.cc"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 8,
                  "endLine": 49,
                  "endColumn": 61,
                  "charOffset": 1282,
                  "charLength": 53,
                  "snippet": {
                    "text": "memcpy(&attr.ai_addr, ifa->ifa_addr, attr.ai_addrlen)",
                    "rendered": {
                      "text": "memcpy(&attr.ai_addr, ifa->ifa_addr, attr.ai_addrlen)",
                      "markdown": "`memcpy(&attr.ai_addr, ifa->ifa_addr, attr.ai_addrlen)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/tcp/device.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1282,
                        "charLength": 53
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&attr.ai_addr, <size of &attr.ai_addr>,  ifa->ifa_addr,  attr.ai_addrlen)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-126c758a-97a2-457d-ab1e-159bcef40a0d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allgather.cc"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 53,
                  "endColumn": 17,
                  "charOffset": 1654,
                  "charLength": 133,
                  "snippet": {
                    "text": "memcpy(\n        static_cast<uint8_t*>(out->ptr) + context->rank * in->size,\n        static_cast<uint8_t*>(in->ptr),\n        in->size)",
                    "rendered": {
                      "text": "memcpy(\n        static_cast<uint8_t*>(out->ptr) + context->rank * in->size,\n        static_cast<uint8_t*>(in->ptr),\n        in->size)",
                      "markdown": "`memcpy(\n        static_cast<uint8_t*>(out->ptr) + context->rank * in->size,\n        static_cast<uint8_t*>(in->ptr),\n        in->size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allgather.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1654,
                        "charLength": 133
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n        static_cast<uint8_t*>(out->ptr) + context->rank * in->size, <size of \n        static_cast<uint8_t*>(out->ptr) + context->rank * in->size>, \n        static_cast<uint8_t*>(in->ptr), \n        in->size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-0f21f40f-d624-48b8-87cc-826adf7349cd",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/scatter.cc"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 4,
                  "endLine": 48,
                  "endColumn": 55,
                  "charOffset": 1334,
                  "charLength": 51,
                  "snippet": {
                    "text": "memcpy(out->ptr, in[context->rank]->ptr, out->size)",
                    "rendered": {
                      "text": "memcpy(out->ptr, in[context->rank]->ptr, out->size)",
                      "markdown": "`memcpy(out->ptr, in[context->rank]->ptr, out->size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/scatter.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1334,
                        "charLength": 51
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out->ptr, <size of out->ptr>,  in[context->rank]->ptr,  out->size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-8564b1e9-440e-4129-ab53-42ddbc3dc652",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/gather.cc"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 4,
                  "endLine": 47,
                  "endColumn": 18,
                  "charOffset": 1141,
                  "charLength": 111,
                  "snippet": {
                    "text": "memcpy(\n        static_cast<char*>(out->ptr) + (context->rank * chunkSize),\n        in->ptr,\n        chunkSize)",
                    "rendered": {
                      "text": "memcpy(\n        static_cast<char*>(out->ptr) + (context->rank * chunkSize),\n        in->ptr,\n        chunkSize)",
                      "markdown": "`memcpy(\n        static_cast<char*>(out->ptr) + (context->rank * chunkSize),\n        in->ptr,\n        chunkSize)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/gather.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1141,
                        "charLength": 111
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n        static_cast<char*>(out->ptr) + (context->rank * chunkSize), <size of \n        static_cast<char*>(out->ptr) + (context->rank * chunkSize)>, \n        in->ptr, \n        chunkSize)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-17c0716d-8cf9-441a-a77b-f355c44f57ea",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_local.cc"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 4,
                  "endLine": 36,
                  "endColumn": 38,
                  "charOffset": 859,
                  "charLength": 34,
                  "snippet": {
                    "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                    "rendered": {
                      "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                      "markdown": "`memcpy(ptrs_[i], ptrs_[0], bytes_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_local.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 859,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptrs_[i], <size of ptrs_[i]>,  ptrs_[0],  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2763a016-7579-43f2-a291-43a5ba133cbc",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/benchmark/options.cc"
                },
                "region": {
                  "startLine": 344,
                  "startColumn": 44,
                  "endLine": 344,
                  "endColumn": 58,
                  "charOffset": 10528,
                  "charLength": 14,
                  "snippet": {
                    "text": "strlen(optarg)",
                    "rendered": {
                      "text": "strlen(optarg)",
                      "markdown": "`strlen(optarg)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10528,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strlen_s(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10528,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strnlen(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2c954851-1a97-4497-b644-1abece264b5b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/benchmark/options.cc"
                },
                "region": {
                  "startLine": 339,
                  "startColumn": 44,
                  "endLine": 339,
                  "endColumn": 58,
                  "charOffset": 10404,
                  "charLength": 14,
                  "snippet": {
                    "text": "strlen(optarg)",
                    "rendered": {
                      "text": "strlen(optarg)",
                      "markdown": "`strlen(optarg)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10404,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strlen_s(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10404,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strnlen(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-c44ac30c-1628-47e2-99d9-639f8f485b00",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/benchmark/options.cc"
                },
                "region": {
                  "startLine": 334,
                  "startColumn": 42,
                  "endLine": 334,
                  "endColumn": 56,
                  "charOffset": 10280,
                  "charLength": 14,
                  "snippet": {
                    "text": "strlen(optarg)",
                    "rendered": {
                      "text": "strlen(optarg)",
                      "markdown": "`strlen(optarg)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10280,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strlen_s(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10280,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strnlen(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-0442701e-b3ff-4784-9b4d-ef6cb2a5352d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/benchmark/options.cc"
                },
                "region": {
                  "startLine": 329,
                  "startColumn": 42,
                  "endLine": 329,
                  "endColumn": 56,
                  "charOffset": 10161,
                  "charLength": 14,
                  "snippet": {
                    "text": "strlen(optarg)",
                    "rendered": {
                      "text": "strlen(optarg)",
                      "markdown": "`strlen(optarg)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10161,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strlen_s(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10161,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strnlen(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-5165a217-d83d-4ad7-bb81-a3b438b11d6e",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/benchmark/options.cc"
                },
                "region": {
                  "startLine": 319,
                  "startColumn": 48,
                  "endLine": 319,
                  "endColumn": 62,
                  "charOffset": 9938,
                  "charLength": 14,
                  "snippet": {
                    "text": "strlen(optarg)",
                    "rendered": {
                      "text": "strlen(optarg)",
                      "markdown": "`strlen(optarg)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9938,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strlen_s(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9938,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strnlen(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-28236e19-c7e2-405c-b57c-dffe16eb2846",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/address.cc"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 15,
                  "endLine": 76,
                  "endColumn": 26,
                  "charOffset": 1986,
                  "charLength": 11,
                  "snippet": {
                    "text": "strlen(str)",
                    "rendered": {
                      "text": "strlen(str)",
                      "markdown": "`strlen(str)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/tcp/address.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1986,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strlen_s(str, <size of str>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/tcp/address.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1986,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strnlen(str, <size of str>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-bd2609db-5d8c-46b0-8406-0c85c27d8e92",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_halving_doubling.h"
                },
                "region": {
                  "startLine": 345,
                  "startColumn": 6,
                  "endLine": 345,
                  "endColumn": 40,
                  "charOffset": 12597,
                  "charLength": 34,
                  "snippet": {
                    "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                    "rendered": {
                      "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                      "markdown": "`memcpy(ptrs_[i], ptrs_[0], bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_halving_doubling.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12597,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptrs_[i], <size of ptrs_[i]>,  ptrs_[0],  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-cc722f93-f752-41cd-8065-211c590ecdf1",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_halving_doubling.h"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 8,
                  "endLine": 334,
                  "endColumn": 38,
                  "charOffset": 12197,
                  "charLength": 123,
                  "snippet": {
                    "text": "memcpy(\n            &ptrs_[0][sendOffsets_[i]],\n            &recvBuf_[bufferOffset],\n            sendCounts_[i] * sizeof(T)",
                    "rendered": {
                      "text": "memcpy(\n            &ptrs_[0][sendOffsets_[i]],\n            &recvBuf_[bufferOffset],\n            sendCounts_[i] * sizeof(T)",
                      "markdown": "`memcpy(\n            &ptrs_[0][sendOffsets_[i]],\n            &recvBuf_[bufferOffset],\n            sendCounts_[i] * sizeof(T)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_halving_doubling.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12197,
                        "charLength": 123
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n            &ptrs_[0][sendOffsets_[i]], <size of \n            &ptrs_[0][sendOffsets_[i]]>, \n            &recvBuf_[bufferOffset], \n            sendCounts_[i] * sizeof(T)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ce5e7f80-0070-4181-a215-e12cb7d3f211",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/benchmark/options.cc"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 47,
                  "endLine": 213,
                  "endColumn": 61,
                  "charOffset": 7592,
                  "charLength": 14,
                  "snippet": {
                    "text": "strlen(optarg)",
                    "rendered": {
                      "text": "strlen(optarg)",
                      "markdown": "`strlen(optarg)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7592,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strlen_s(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7592,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strnlen(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-4dcacb3e-8ce1-4424-87d0-739ce6548abd",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/address.cc"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 2,
                  "endLine": 55,
                  "endColumn": 44,
                  "charOffset": 1343,
                  "charLength": 42,
                  "snippet": {
                    "text": "memcpy(bytes.data(), &impl_, sizeof(impl_)",
                    "rendered": {
                      "text": "memcpy(bytes.data(), &impl_, sizeof(impl_)",
                      "markdown": "`memcpy(bytes.data(), &impl_, sizeof(impl_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/tcp/address.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1343,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "memcpy_s(bytes.data(), <size of bytes.data()>,  &impl_,  sizeof(impl_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d451d9c1-93fd-452f-ac7a-3905524e8c33",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_halving_doubling.h"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 6,
                  "endLine": 304,
                  "endColumn": 38,
                  "charOffset": 11097,
                  "charLength": 110,
                  "snippet": {
                    "text": "memcpy(\n          &ptrs_[0][offset],\n          &recvBuf_[bufferOffset],\n          totalItemsToSend * sizeof(T)",
                    "rendered": {
                      "text": "memcpy(\n          &ptrs_[0][offset],\n          &recvBuf_[bufferOffset],\n          totalItemsToSend * sizeof(T)",
                      "markdown": "`memcpy(\n          &ptrs_[0][offset],\n          &recvBuf_[bufferOffset],\n          totalItemsToSend * sizeof(T)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_halving_doubling.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11097,
                        "charLength": 110
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n          &ptrs_[0][offset], <size of \n          &ptrs_[0][offset]>, \n          &recvBuf_[bufferOffset], \n          totalItemsToSend * sizeof(T)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-32189a00-5a4e-426f-beee-5e42f21972dd",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/benchmark/options.cc"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 44,
                  "endLine": 209,
                  "endColumn": 58,
                  "charOffset": 7487,
                  "charLength": 14,
                  "snippet": {
                    "text": "strlen(optarg)",
                    "rendered": {
                      "text": "strlen(optarg)",
                      "markdown": "`strlen(optarg)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7487,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strlen_s(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7487,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strnlen(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-63e554ea-0f49-47ae-9f4c-b927b54c146e",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/address.cc"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 2,
                  "endLine": 46,
                  "endColumn": 44,
                  "charOffset": 1078,
                  "charLength": 42,
                  "snippet": {
                    "text": "memcpy(&impl_, bytes.data(), sizeof(impl_)",
                    "rendered": {
                      "text": "memcpy(&impl_, bytes.data(), sizeof(impl_)",
                      "markdown": "`memcpy(&impl_, bytes.data(), sizeof(impl_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/tcp/address.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1078,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&impl_, <size of &impl_>,  bytes.data(),  sizeof(impl_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-5fae58e0-d4b8-4e04-b79e-ca7b93c7313f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_halving_doubling.h"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 8,
                  "endLine": 238,
                  "endColumn": 42,
                  "charOffset": 8797,
                  "charLength": 34,
                  "snippet": {
                    "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                    "rendered": {
                      "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                      "markdown": "`memcpy(ptrs_[i], ptrs_[0], bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_halving_doubling.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8797,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptrs_[i], <size of ptrs_[i]>,  ptrs_[0],  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-09542c21-cde6-4659-8f42-abd0ee14e778",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allgatherv.cc"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 6,
                  "endLine": 110,
                  "endColumn": 19,
                  "charOffset": 3465,
                  "charLength": 141,
                  "snippet": {
                    "text": "memcpy(\n          static_cast<uint8_t*>(out->ptr) + byteOffsets[context->rank],\n          static_cast<uint8_t*>(in->ptr),\n          in->size)",
                    "rendered": {
                      "text": "memcpy(\n          static_cast<uint8_t*>(out->ptr) + byteOffsets[context->rank],\n          static_cast<uint8_t*>(in->ptr),\n          in->size)",
                      "markdown": "`memcpy(\n          static_cast<uint8_t*>(out->ptr) + byteOffsets[context->rank],\n          static_cast<uint8_t*>(in->ptr),\n          in->size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allgatherv.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3465,
                        "charLength": 141
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n          static_cast<uint8_t*>(out->ptr) + byteOffsets[context->rank], <size of \n          static_cast<uint8_t*>(out->ptr) + byteOffsets[context->rank]>, \n          static_cast<uint8_t*>(in->ptr), \n          in->size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-64325390-ab0c-467c-97d9-3e50d7fd7f54",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/address.cc"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 2,
                  "endLine": 27,
                  "endColumn": 34,
                  "charOffset": 592,
                  "charLength": 32,
                  "snippet": {
                    "text": "memcpy(&impl_.ss, addr, addrlen)",
                    "rendered": {
                      "text": "memcpy(&impl_.ss, addr, addrlen)",
                      "markdown": "`memcpy(&impl_.ss, addr, addrlen)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/tcp/address.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 592,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&impl_.ss, <size of &impl_.ss>,  addr,  addrlen)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-3ed47133-e99e-4df5-9295-d9e3f54a5874",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/benchmark/options.cc"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 47,
                  "endLine": 201,
                  "endColumn": 61,
                  "charOffset": 7303,
                  "charLength": 14,
                  "snippet": {
                    "text": "strlen(optarg)",
                    "rendered": {
                      "text": "strlen(optarg)",
                      "markdown": "`strlen(optarg)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7303,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strlen_s(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7303,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strnlen(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}