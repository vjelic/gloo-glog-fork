{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "glog-27c12a6c-14b5-44e8-a17c-061940364aa4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-280cba67-4d4f-472e-9aa2-a26766734608",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-4aa04ee3-b10b-4caf-b29d-203b9f118a95",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-06c764dd-7e7e-45e6-9b16-fc065b4df5d3",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-85f762d1-00ab-44e0-94f1-dbebb5d6ce85",
              "name": "Win32HardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol: Win32 - Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440077"
                ]
              }
            },
            {
              "id": "glog-8457043d-159f-44c0-a76a-53257b8766cb",
              "name": "Win32HardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol: Win32 - Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440077"
                ]
              }
            },
            {
              "id": "glog-557868af-173e-4bc8-94b4-13e333ac4458",
              "name": "Win32HardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol: Win32 - Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440077"
                ]
              }
            },
            {
              "id": "glog-893255ae-3c89-43e4-b1fc-78172a3f5474",
              "name": "Win32HardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol: Win32 - Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440077"
                ]
              }
            },
            {
              "id": "glog-d22deccd-4d24-4dff-834a-82da4c451c78",
              "name": "Win32HardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol: Win32 - Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440077"
                ]
              }
            },
            {
              "id": "glog-08aa1144-a64c-4294-8455-37352984f7e1",
              "name": "Win32HardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol: Win32 - Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440077"
                ]
              }
            },
            {
              "id": "glog-37c5aa40-4ddc-4f03-b505-92f16e5a8761",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-c4abd1c2-6e94-415a-9b42-048effd5368c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-cdf03a3e-0268-4f1e-8d89-5beb276157ba",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-f6a079dd-dff9-474f-96cc-c37edc4818d1",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-ac943542-8b1f-4343-876c-eeafd808a4c7",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-1bdbdcba-2db2-492f-9926-a39cc7f21c2d",
              "name": "Win32HardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol: Win32 - Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440077"
                ]
              }
            },
            {
              "id": "glog-d29482ce-b6d7-4812-8c13-eb6924e28424",
              "name": "OpensslDoNotHardcodeSsltlsVersionsWithinAnApplication",
              "shortDescription": {
                "text": "SSL/TLS version usage should be based on an OS or external configuration."
              },
              "fullDescription": {
                "text": "OpenSSL: Do not hardcode SSL/TLS versions within an application.: SSL/TLS version usage should be based on an OS or external configuration."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "SSL/TLS version usage should be based on an OS or external configuration.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS440010"
                ]
              }
            },
            {
              "id": "glog-46032363-7b52-416d-812c-642088b511df",
              "name": "Win32HardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol: Win32 - Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440077"
                ]
              }
            },
            {
              "id": "glog-f6047e1e-6504-4901-81bb-8a0da25e587d",
              "name": "OpensslDoNotHardcodeSsltlsVersionsWithinAnApplication",
              "shortDescription": {
                "text": "SSL/TLS version usage should be based on an OS or external configuration."
              },
              "fullDescription": {
                "text": "OpenSSL: Do not hardcode SSL/TLS versions within an application.: SSL/TLS version usage should be based on an OS or external configuration."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "SSL/TLS version usage should be based on an OS or external configuration.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS440010"
                ]
              }
            },
            {
              "id": "glog-2bee18ec-bad0-4967-9325-6d13f01ddca0",
              "name": "OpensslHardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "OpenSSL: Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "OpenSSL: Hard-coded SSL/TLS Protocol: OpenSSL: Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440001.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440001.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440001.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440011"
                ]
              }
            },
            {
              "id": "glog-f292563b-8f9d-436d-8983-445a36dee7b4",
              "name": "Win32HardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol: Win32 - Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440077"
                ]
              }
            },
            {
              "id": "glog-4871184b-ca3c-4015-957f-a31a74640264",
              "name": "Win32HardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol: Win32 - Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440077"
                ]
              }
            },
            {
              "id": "glog-195c5453-ba3f-405f-9a13-e68607e364f8",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-95f9b129-24cd-4c1f-8ac5-86ff2b44d7e4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-ad4d7c39-4ae4-4b96-96c0-82d544482129",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-d45e2312-3932-4aad-994d-c3b9da7c1d0b",
              "name": "Win32HardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol: Win32 - Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440077"
                ]
              }
            },
            {
              "id": "glog-7fcc6e3b-18aa-47a5-8a0e-318fdb666885",
              "name": "Win32HardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol: Win32 - Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440077"
                ]
              }
            },
            {
              "id": "glog-37769e2b-df13-4001-aa57-02eae4aa7a16",
              "name": "Win32HardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol: Win32 - Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440077"
                ]
              }
            },
            {
              "id": "glog-2507623a-b9b3-42ac-b207-63c2e8c4536e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-3f659477-7aa7-4d9c-9b30-f87a5e55a5ee",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-382f7a7e-612b-4d0c-be13-adff0415ba30",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-f19f25af-58cf-4fdc-a19c-0c8af5c25be5",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-9c9c257e-c29b-48ed-821c-a67afd7fea0f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-3b7fd15b-4de6-44e6-be75-9fca53ca9ae0",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-54700acd-07af-419f-85ce-3ea4ef616d48",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-9660983e-26cc-48fd-bc04-19b89185c743",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS162092"
                ]
              }
            },
            {
              "id": "glog-382d7cc6-9f2e-41ed-85c8-34243bbb5bdd",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS162092"
                ]
              }
            },
            {
              "id": "glog-d8988125-49e8-4082-93fe-bb4366488979",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-ad9069a1-afde-40bb-955f-bb5b1dc883de",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-e8d0cff7-f965-4e1d-a17c-7d01d0bdf383",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-71cab08a-7544-45a9-9510-f319d7980bdd",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-5617cd18-5311-4e25-af0d-f3e7c4873c01",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-f7426a6b-ee32-4162-b7bd-0af2f7c36302",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-1ef6da5f-b11f-4d95-b885-5877e996ab52",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-1d06c3e7-5196-477a-8155-c1ca5f3df1e6",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-301dcb3a-2745-4600-ab4b-79625f3d5ebc",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-502e1f68-659c-41d3-9f8a-c4ef902b2618",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-3b297aca-0c3f-4b4f-be7e-8ec69afa0e76",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-b22da324-e6a9-4ede-96af-fd770d0cdbf0",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-7f752bb7-9777-4d18-9a45-c45bd5892921",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-9f1f0809-58b2-4b69-b200-1019d855e902",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-67ce31a2-b999-4387-adc2-5b7bb8ba1b1f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-2cd4c062-a88e-4db8-b654-2666ee80b651",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-c4d6c098-3f05-4062-87f8-a7d42eb479e4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-e5d31515-ef0e-455c-aabf-a03c25c37dc9",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-871fd9ac-1a58-44ed-b32f-0152c2fd3ea4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-2d06644c-b82a-4036-8e47-5afd89c1ac55",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS162092"
                ]
              }
            },
            {
              "id": "glog-7ecafa74-b651-4db2-be17-c618d1d69574",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-08c0aca5-fe5d-4dcb-8fab-8bc4fc2c4510",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-eaadab7c-73c1-40a2-9a05-5af7ce421c6e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-1cdfb2fb-6d16-4119-b435-7e3a4c49f02a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-5ab4b03f-56b5-4853-a42c-22b30b9ba7a0",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS162092"
                ]
              }
            },
            {
              "id": "glog-10a41522-3c27-4c97-b236-7726cc285ff1",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS162092"
                ]
              }
            },
            {
              "id": "glog-9fb66963-e2f0-47ea-9c01-daafbb55bd42",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS162092"
                ]
              }
            },
            {
              "id": "glog-550ce209-546f-4628-9e92-aaf53a52b4c7",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-05430f36-5446-4af4-97af-5df5b23d98a7",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-a72a1b10-524e-4014-b470-08691ce0ad4a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS162092"
                ]
              }
            },
            {
              "id": "glog-6a2880c3-75bd-49a5-88ef-03351e713eae",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS162092"
                ]
              }
            },
            {
              "id": "glog-0fad81e3-7466-4160-9903-07a3f53068e3",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS162092"
                ]
              }
            },
            {
              "id": "glog-c08cb493-564b-4310-86f8-6059eca6f825",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-ab260529-ced6-4a82-a60c-b2f6d277cca3",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS162092"
                ]
              }
            },
            {
              "id": "glog-3e4cff9e-4e2b-4fe3-ab68-55f14e656a54",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS162092"
                ]
              }
            },
            {
              "id": "glog-ff9d6ea6-8439-400a-bcb7-48aead85b9fe",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS162092"
                ]
              }
            },
            {
              "id": "glog-80b1ea22-ab2d-40bb-9006-6d1187636fd4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-e977f45c-f773-4119-b044-9ff055c29f82",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-f41c5ada-fc11-4f0e-b155-2b56e51eb9c3",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-01a105be-8407-40f2-823a-eebabd46c739",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-ff3dd124-d2b3-4a5a-881e-5825aa4e668c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-42bf329d-da83-43d7-8f37-0df369fdca18",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-d3b706c0-79c4-4787-96af-3edf873378fc",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-f9041ef0-d997-42ee-80d6-8521bace5265",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-2e0a50d9-87e3-47bd-bc1d-745c8fe08dbf",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-c3cd66e6-8fd3-4f32-b9f7-7fee3e5cb142",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-fea3bac1-60b4-4365-995c-f9ae12566de7",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-02f7fa7d-196b-451d-8bd4-292f6b056a6b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-8d7c990a-ccfc-45a4-b0fd-6f6382e90240",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-23405aca-47b6-45f4-8e82-b222da1dfb7d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-97e1f321-c755-4395-b1bf-7b225ae72beb",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-fa5f171a-bafd-43fb-982f-c89ff13d2f5d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-27d7155f-4bd1-482b-8a01-6ec1d56d2fed",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-6ecc84b1-4102-4b55-a1cd-bec9bd54c8f3",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-21d4b54f-88b9-49e4-ac3d-99744d120517",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-1cde403b-9ea8-4ded-91e5-d906f543f14d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-f635497a-3dc3-4093-8702-db40b3677a67",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-c660c180-c104-414e-8583-b99c1b652569",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-d9952244-c4c5-43a7-8f55-51753b729e60",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-a4b41aec-89ef-4c83-aa08-56764f2dba4d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-399b6f3c-9b6e-4fb8-9086-f01d23e2a1ba",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-5238c40b-1dcb-4f16-bad7-ad9c484f8d75",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "glog-4aa04ee3-b10b-4caf-b29d-203b9f118a95",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_ring.h"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 8,
                  "endLine": 98,
                  "endColumn": 39,
                  "charOffset": 2657,
                  "charLength": 31,
                  "snippet": {
                    "text": "memcpy(outbox_, inbox_, bytes_)",
                    "rendered": {
                      "text": "memcpy(outbox_, inbox_, bytes_)",
                      "markdown": "`memcpy(outbox_, inbox_, bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_ring.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2657,
                        "charLength": 31
                      },
                      "insertedContent": {
                        "text": "memcpy_s(outbox_, <size of outbox_>,  inbox_,  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-06c764dd-7e7e-45e6-9b16-fc065b4df5d3",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/broadcast_one_to_all.h"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 6,
                  "endLine": 110,
                  "endColumn": 55,
                  "charOffset": 3097,
                  "charLength": 49,
                  "snippet": {
                    "text": "memcpy(ptrs_[i], ptrs_[rootPointerRank_], bytes_)",
                    "rendered": {
                      "text": "memcpy(ptrs_[i], ptrs_[rootPointerRank_], bytes_)",
                      "markdown": "`memcpy(ptrs_[i], ptrs_[rootPointerRank_], bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/broadcast_one_to_all.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3097,
                        "charLength": 49
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptrs_[i], <size of ptrs_[i]>,  ptrs_[rootPointerRank_],  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-85f762d1-00ab-44e0-94f1-dbebb5d6ce85",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Win32 - Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/openssl.cc"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 11,
                  "endLine": 52,
                  "endColumn": 37,
                  "charOffset": 1501,
                  "charLength": 26,
                  "snippet": {
                    "text": "SSL_CTX_set_security_level",
                    "rendered": {
                      "text": "SSL_CTX_set_security_level",
                      "markdown": "`SSL_CTX_set_security_level`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-8457043d-159f-44c0-a76a-53257b8766cb",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Win32 - Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/openssl.cc"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 5,
                  "endLine": 51,
                  "endColumn": 31,
                  "charOffset": 1436,
                  "charLength": 26,
                  "snippet": {
                    "text": "SSL_CTX_set_security_level",
                    "rendered": {
                      "text": "SSL_CTX_set_security_level",
                      "markdown": "`SSL_CTX_set_security_level`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-557868af-173e-4bc8-94b4-13e333ac4458",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Win32 - Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/openssl.cc"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 11,
                  "endLine": 34,
                  "endColumn": 22,
                  "charOffset": 996,
                  "charLength": 11,
                  "snippet": {
                    "text": "SSL_CTX_new",
                    "rendered": {
                      "text": "SSL_CTX_new",
                      "markdown": "`SSL_CTX_new`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-893255ae-3c89-43e4-b1fc-78172a3f5474",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Win32 - Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/openssl.cc"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 9,
                  "endLine": 33,
                  "endColumn": 20,
                  "charOffset": 945,
                  "charLength": 11,
                  "snippet": {
                    "text": "SSL_CTX_new",
                    "rendered": {
                      "text": "SSL_CTX_new",
                      "markdown": "`SSL_CTX_new`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-d22deccd-4d24-4dff-834a-82da4c451c78",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Win32 - Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/openssl.cc"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 46,
                  "endLine": 31,
                  "endColumn": 56,
                  "charOffset": 920,
                  "charLength": 10,
                  "snippet": {
                    "text": "TLS_method",
                    "rendered": {
                      "text": "TLS_method",
                      "markdown": "`TLS_method`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-08aa1144-a64c-4294-8455-37352984f7e1",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Win32 - Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/openssl.cc"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 18,
                  "endLine": 31,
                  "endColumn": 28,
                  "charOffset": 892,
                  "charLength": 10,
                  "snippet": {
                    "text": "TLS_method",
                    "rendered": {
                      "text": "TLS_method",
                      "markdown": "`TLS_method`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-37c5aa40-4ddc-4f03-b505-92f16e5a8761",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/reduce.cc"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 6,
                  "endLine": 56,
                  "endColumn": 65,
                  "charOffset": 1777,
                  "charLength": 59,
                  "snippet": {
                    "text": "memcpy(out->ptr, in->ptr, opts.elements * opts.elementSize)",
                    "rendered": {
                      "text": "memcpy(out->ptr, in->ptr, opts.elements * opts.elementSize)",
                      "markdown": "`memcpy(out->ptr, in->ptr, opts.elements * opts.elementSize)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/reduce.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1777,
                        "charLength": 59
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out->ptr, <size of out->ptr>,  in->ptr,  opts.elements * opts.elementSize)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-c4abd1c2-6e94-415a-9b42-048effd5368c",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_ring.h"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 29,
                  "endLine": 32,
                  "endColumn": 43,
                  "charOffset": 757,
                  "charLength": 14,
                  "snippet": {
                    "text": "malloc(bytes_)",
                    "rendered": {
                      "text": "malloc(bytes_)",
                      "markdown": "`malloc(bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_ring.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 757,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-cdf03a3e-0268-4f1e-8d89-5beb276157ba",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_ring.h"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 30,
                  "endLine": 33,
                  "endColumn": 44,
                  "charOffset": 804,
                  "charLength": 14,
                  "snippet": {
                    "text": "malloc(bytes_)",
                    "rendered": {
                      "text": "malloc(bytes_)",
                      "markdown": "`malloc(bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_ring.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 804,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f6a079dd-dff9-474f-96cc-c37edc4818d1",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_ring_chunked.h"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 6,
                  "endLine": 210,
                  "endColumn": 40,
                  "charOffset": 6946,
                  "charLength": 34,
                  "snippet": {
                    "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                    "rendered": {
                      "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                      "markdown": "`memcpy(ptrs_[i], ptrs_[0], bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_ring_chunked.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6946,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptrs_[i], <size of ptrs_[i]>,  ptrs_[0],  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ac943542-8b1f-4343-876c-eeafd808a4c7",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_ring_chunked.h"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 8,
                  "endLine": 184,
                  "endColumn": 77,
                  "charOffset": 6071,
                  "charLength": 69,
                  "snippet": {
                    "text": "memcpy(&ptrs_[0][offset], inbox_[chunkOffset & 1], length * sizeof(T)",
                    "rendered": {
                      "text": "memcpy(&ptrs_[0][offset], inbox_[chunkOffset & 1], length * sizeof(T)",
                      "markdown": "`memcpy(&ptrs_[0][offset], inbox_[chunkOffset & 1], length * sizeof(T)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_ring_chunked.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6071,
                        "charLength": 69
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&ptrs_[0][offset], <size of &ptrs_[0][offset]>,  inbox_[chunkOffset & 1],  length * sizeof(T)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-1bdbdcba-2db2-492f-9926-a39cc7f21c2d",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Win32 - Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/context.cc"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 12,
                  "endLine": 91,
                  "endColumn": 38,
                  "charOffset": 3456,
                  "charLength": 26,
                  "snippet": {
                    "text": "SSL_CTX_set_security_level",
                    "rendered": {
                      "text": "SSL_CTX_set_security_level",
                      "markdown": "`SSL_CTX_set_security_level`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-d29482ce-b6d7-4812-8c13-eb6924e28424",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "OpenSSL: Do not hardcode SSL/TLS versions within an application."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/context.cc"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 43,
                  "endLine": 70,
                  "endColumn": 71,
                  "charOffset": 2548,
                  "charLength": 28,
                  "snippet": {
                    "text": "SSL_OP_LEGACY_SERVER_CONNECT",
                    "rendered": {
                      "text": "SSL_OP_LEGACY_SERVER_CONNECT",
                      "markdown": "`SSL_OP_LEGACY_SERVER_CONNECT`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hardcoded"
            ]
          }
        },
        {
          "ruleId": "glog-46032363-7b52-416d-812c-642088b511df",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Win32 - Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/context.cc"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 16,
                  "endLine": 65,
                  "endColumn": 45,
                  "charOffset": 2313,
                  "charLength": 29,
                  "snippet": {
                    "text": "SSL_CTX_set_min_proto_version",
                    "rendered": {
                      "text": "SSL_CTX_set_min_proto_version",
                      "markdown": "`SSL_CTX_set_min_proto_version`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-f6047e1e-6504-4901-81bb-8a0da25e587d",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "OpenSSL: Do not hardcode SSL/TLS versions within an application."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/context.cc"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 16,
                  "endLine": 65,
                  "endColumn": 45,
                  "charOffset": 2313,
                  "charLength": 29,
                  "snippet": {
                    "text": "SSL_CTX_set_min_proto_version",
                    "rendered": {
                      "text": "SSL_CTX_set_min_proto_version",
                      "markdown": "`SSL_CTX_set_min_proto_version`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hardcoded"
            ]
          }
        },
        {
          "ruleId": "glog-2bee18ec-bad0-4967-9325-6d13f01ddca0",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "OpenSSL: Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/context.cc"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 16,
                  "endLine": 65,
                  "endColumn": 45,
                  "charOffset": 2313,
                  "charLength": 29,
                  "snippet": {
                    "text": "SSL_CTX_set_min_proto_version",
                    "rendered": {
                      "text": "SSL_CTX_set_min_proto_version",
                      "markdown": "`SSL_CTX_set_min_proto_version`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-f292563b-8f9d-436d-8983-445a36dee7b4",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Win32 - Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/context.cc"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 53,
                  "endLine": 62,
                  "endColumn": 63,
                  "charOffset": 2208,
                  "charLength": 10,
                  "snippet": {
                    "text": "TLS_method",
                    "rendered": {
                      "text": "TLS_method",
                      "markdown": "`TLS_method`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-4871184b-ca3c-4015-957f-a31a74640264",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Win32 - Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/context.cc"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 31,
                  "endLine": 62,
                  "endColumn": 42,
                  "charOffset": 2186,
                  "charLength": 11,
                  "snippet": {
                    "text": "SSL_CTX_new",
                    "rendered": {
                      "text": "SSL_CTX_new",
                      "markdown": "`SSL_CTX_new`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-195c5453-ba3f-405f-9a13-e68607e364f8",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/cuda_collectives_native.h"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 9,
                  "endLine": 57,
                  "endColumn": 17,
                  "charOffset": 1698,
                  "charLength": 8,
                  "snippet": {
                    "text": "shuffle(",
                    "rendered": {
                      "text": "shuffle(",
                      "markdown": "`shuffle(`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-95f9b129-24cd-4c1f-8ac5-86ff2b44d7e4",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_ring_chunked.h"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 8,
                  "endLine": 96,
                  "endColumn": 42,
                  "charOffset": 2696,
                  "charLength": 34,
                  "snippet": {
                    "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                    "rendered": {
                      "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                      "markdown": "`memcpy(ptrs_[i], ptrs_[0], bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_ring_chunked.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2696,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptrs_[i], <size of ptrs_[i]>,  ptrs_[0],  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ad4d7c39-4ae4-4b96-96c0-82d544482129",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_ring_chunked.h"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 34,
                  "endLine": 44,
                  "endColumn": 48,
                  "charOffset": 1206,
                  "charLength": 14,
                  "snippet": {
                    "text": "malloc(bytes_)",
                    "rendered": {
                      "text": "malloc(bytes_)",
                      "markdown": "`malloc(bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_ring_chunked.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1206,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d45e2312-3932-4aad-994d-c3b9da7c1d0b",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Win32 - Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/openssl.h"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 5,
                  "endLine": 32,
                  "endColumn": 31,
                  "charOffset": 773,
                  "charLength": 26,
                  "snippet": {
                    "text": "SSL_CTX_set_security_level",
                    "rendered": {
                      "text": "SSL_CTX_set_security_level",
                      "markdown": "`SSL_CTX_set_security_level`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-7fcc6e3b-18aa-47a5-8a0e-318fdb666885",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Win32 - Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/openssl.h"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 9,
                  "endLine": 22,
                  "endColumn": 20,
                  "charOffset": 501,
                  "charLength": 11,
                  "snippet": {
                    "text": "SSL_CTX_new",
                    "rendered": {
                      "text": "SSL_CTX_new",
                      "markdown": "`SSL_CTX_new`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-37769e2b-df13-4001-aa57-02eae4aa7a16",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Win32 - Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/openssl.h"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 18,
                  "endLine": 20,
                  "endColumn": 28,
                  "charOffset": 473,
                  "charLength": 10,
                  "snippet": {
                    "text": "TLS_method",
                    "rendered": {
                      "text": "TLS_method",
                      "markdown": "`TLS_method`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-2507623a-b9b3-42ac-b207-63c2e8c4536e",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/gatherv.cc"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 10,
                  "endLine": 97,
                  "endColumn": 23,
                  "charOffset": 2799,
                  "charLength": 107,
                  "snippet": {
                    "text": "memcpy(\n              static_cast<char*>(out->ptr) + offset,\n              in->ptr,\n              in->size)",
                    "rendered": {
                      "text": "memcpy(\n              static_cast<char*>(out->ptr) + offset,\n              in->ptr,\n              in->size)",
                      "markdown": "`memcpy(\n              static_cast<char*>(out->ptr) + offset,\n              in->ptr,\n              in->size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/gatherv.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2799,
                        "charLength": 107
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n              static_cast<char*>(out->ptr) + offset, <size of \n              static_cast<char*>(out->ptr) + offset>, \n              in->ptr, \n              in->size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-3f659477-7aa7-4d9c-9b30-f87a5e55a5ee",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/alltoallv.cc"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 2,
                  "endLine": 145,
                  "endColumn": 18,
                  "charOffset": 4678,
                  "charLength": 124,
                  "snippet": {
                    "text": "memcpy(\n      static_cast<char*>(out->ptr) + myOutOffset,\n      static_cast<char*>(in->ptr) + myInOffset,\n      myChunkSize)",
                    "rendered": {
                      "text": "memcpy(\n      static_cast<char*>(out->ptr) + myOutOffset,\n      static_cast<char*>(in->ptr) + myInOffset,\n      myChunkSize)",
                      "markdown": "`memcpy(\n      static_cast<char*>(out->ptr) + myOutOffset,\n      static_cast<char*>(in->ptr) + myInOffset,\n      myChunkSize)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/alltoallv.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4678,
                        "charLength": 124
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n      static_cast<char*>(out->ptr) + myOutOffset, <size of \n      static_cast<char*>(out->ptr) + myOutOffset>, \n      static_cast<char*>(in->ptr) + myInOffset, \n      myChunkSize)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-382f7a7e-612b-4d0c-be13-adff0415ba30",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allgather_ring.h"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 6,
                  "endLine": 63,
                  "endColumn": 76,
                  "charOffset": 1999,
                  "charLength": 70,
                  "snippet": {
                    "text": "memcpy(outPtr_ + rank * inputStride_ + i * count_, inPtrs_[i], bytes_)",
                    "rendered": {
                      "text": "memcpy(outPtr_ + rank * inputStride_ + i * count_, inPtrs_[i], bytes_)",
                      "markdown": "`memcpy(outPtr_ + rank * inputStride_ + i * count_, inPtrs_[i], bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allgather_ring.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1999,
                        "charLength": 70
                      },
                      "insertedContent": {
                        "text": "memcpy_s(outPtr_ + rank * inputStride_ + i * count_, <size of outPtr_ + rank * inputStride_ + i * count_>,  inPtrs_[i],  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f19f25af-58cf-4fdc-a19c-0c8af5c25be5",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/reduce_scatter.h"
                },
                "region": {
                  "startLine": 426,
                  "startColumn": 6,
                  "endLine": 426,
                  "endColumn": 40,
                  "charOffset": 15530,
                  "charLength": 34,
                  "snippet": {
                    "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                    "rendered": {
                      "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                      "markdown": "`memcpy(ptrs_[i], ptrs_[0], bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/reduce_scatter.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 15530,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptrs_[i], <size of ptrs_[i]>,  ptrs_[0],  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-9c9c257e-c29b-48ed-821c-a67afd7fea0f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/reduce_scatter.h"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 10,
                  "endLine": 418,
                  "endColumn": 43,
                  "charOffset": 15253,
                  "charLength": 131,
                  "snippet": {
                    "text": "memcpy(\n              &ptrs_[0][bufferOffset],\n              &ptrs_[0][distMap.offset],\n              distMap.itemCount * sizeof(T)",
                    "rendered": {
                      "text": "memcpy(\n              &ptrs_[0][bufferOffset],\n              &ptrs_[0][distMap.offset],\n              distMap.itemCount * sizeof(T)",
                      "markdown": "`memcpy(\n              &ptrs_[0][bufferOffset],\n              &ptrs_[0][distMap.offset],\n              distMap.itemCount * sizeof(T)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/reduce_scatter.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 15253,
                        "charLength": 131
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n              &ptrs_[0][bufferOffset], <size of \n              &ptrs_[0][bufferOffset]>, \n              &ptrs_[0][distMap.offset], \n              distMap.itemCount * sizeof(T)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-3b7fd15b-4de6-44e6-be75-9fca53ca9ae0",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/reduce_scatter.h"
                },
                "region": {
                  "startLine": 408,
                  "startColumn": 8,
                  "endLine": 411,
                  "endColumn": 41,
                  "charOffset": 14973,
                  "charLength": 129,
                  "snippet": {
                    "text": "memcpy(\n            &ptrs_[0][bufferOffset],\n            &recvBufDist_[distMap.offset],\n            distMap.itemCount * sizeof(T)",
                    "rendered": {
                      "text": "memcpy(\n            &ptrs_[0][bufferOffset],\n            &recvBufDist_[distMap.offset],\n            distMap.itemCount * sizeof(T)",
                      "markdown": "`memcpy(\n            &ptrs_[0][bufferOffset],\n            &recvBufDist_[distMap.offset],\n            distMap.itemCount * sizeof(T)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/reduce_scatter.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 14973,
                        "charLength": 129
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n            &ptrs_[0][bufferOffset], <size of \n            &ptrs_[0][bufferOffset]>, \n            &recvBufDist_[distMap.offset], \n            distMap.itemCount * sizeof(T)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-54700acd-07af-419f-85ce-3ea4ef616d48",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/reduce_scatter.h"
                },
                "region": {
                  "startLine": 333,
                  "startColumn": 8,
                  "endLine": 333,
                  "endColumn": 42,
                  "charOffset": 12310,
                  "charLength": 34,
                  "snippet": {
                    "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                    "rendered": {
                      "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                      "markdown": "`memcpy(ptrs_[i], ptrs_[0], bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/reduce_scatter.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12310,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptrs_[i], <size of ptrs_[i]>,  ptrs_[0],  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-9660983e-26cc-48fd-bc04-19b89185c743",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/mpi/example/main_managed.cc"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 49,
                  "endLine": 18,
                  "endColumn": 58,
                  "charOffset": 497,
                  "charLength": 9,
                  "snippet": {
                    "text": "localhost",
                    "rendered": {
                      "text": "localhost",
                      "markdown": "`localhost`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-382d7cc6-9f2e-41ed-85c8-34243bbb5bdd",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/mpi/example/main_unmanaged.cc"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 49,
                  "endLine": 23,
                  "endColumn": 58,
                  "charOffset": 561,
                  "charLength": 9,
                  "snippet": {
                    "text": "localhost",
                    "rendered": {
                      "text": "localhost",
                      "markdown": "`localhost`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-d8988125-49e8-4082-93fe-bb4366488979",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/uv/libuv.h"
                },
                "region": {
                  "startLine": 638,
                  "startColumn": 9,
                  "endLine": 638,
                  "endColumn": 41,
                  "charOffset": 15723,
                  "charLength": 32,
                  "snippet": {
                    "text": "memcpy(data.get(), &t, sizeof(T)",
                    "rendered": {
                      "text": "memcpy(data.get(), &t, sizeof(T)",
                      "markdown": "`memcpy(data.get(), &t, sizeof(T)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/uv/libuv.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 15723,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "memcpy_s(data.get(), <size of data.get()>,  &t,  sizeof(T)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ad9069a1-afde-40bb-955f-bb5b1dc883de",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/ibverbs/memory_region.cc"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 2,
                  "endLine": 30,
                  "endColumn": 33,
                  "charOffset": 745,
                  "charLength": 31,
                  "snippet": {
                    "text": "memcpy(&src_, src, sizeof(src_)",
                    "rendered": {
                      "text": "memcpy(&src_, src, sizeof(src_)",
                      "markdown": "`memcpy(&src_, src, sizeof(src_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/ibverbs/memory_region.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 745,
                        "charLength": 31
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&src_, <size of &src_>,  src,  sizeof(src_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e8d0cff7-f965-4e1d-a17c-7d01d0bdf383",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/uv/device.cc"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 4,
                  "endLine": 142,
                  "endColumn": 54,
                  "charOffset": 3362,
                  "charLength": 50,
                  "snippet": {
                    "text": "memcpy(&attr.ai_addr, rp->ai_addr, rp->ai_addrlen)",
                    "rendered": {
                      "text": "memcpy(&attr.ai_addr, rp->ai_addr, rp->ai_addrlen)",
                      "markdown": "`memcpy(&attr.ai_addr, rp->ai_addr, rp->ai_addrlen)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/uv/device.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3362,
                        "charLength": 50
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&attr.ai_addr, <size of &attr.ai_addr>,  rp->ai_addr,  rp->ai_addrlen)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-5617cd18-5311-4e25-af0d-f3e7c4873c01",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/ibverbs/address.cc"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 2,
                  "endLine": 32,
                  "endColumn": 44,
                  "charOffset": 688,
                  "charLength": 42,
                  "snippet": {
                    "text": "memcpy(bytes.data(), &addr_, sizeof(addr_)",
                    "rendered": {
                      "text": "memcpy(bytes.data(), &addr_, sizeof(addr_)",
                      "markdown": "`memcpy(bytes.data(), &addr_, sizeof(addr_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/ibverbs/address.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 688,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "memcpy_s(bytes.data(), <size of bytes.data()>,  &addr_,  sizeof(addr_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-71cab08a-7544-45a9-9510-f319d7980bdd",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/uv/device.cc"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 8,
                  "endLine": 96,
                  "endColumn": 74,
                  "charOffset": 2309,
                  "charLength": 66,
                  "snippet": {
                    "text": "memcpy(&attr->ai_addr, &address.address6, sizeof(address.address6)",
                    "rendered": {
                      "text": "memcpy(&attr->ai_addr, &address.address6, sizeof(address.address6)",
                      "markdown": "`memcpy(&attr->ai_addr, &address.address6, sizeof(address.address6)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/uv/device.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2309,
                        "charLength": 66
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&attr->ai_addr, <size of &attr->ai_addr>,  &address.address6,  sizeof(address.address6)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f7426a6b-ee32-4162-b7bd-0af2f7c36302",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/ibverbs/address.cc"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 2,
                  "endLine": 27,
                  "endColumn": 44,
                  "charOffset": 553,
                  "charLength": 42,
                  "snippet": {
                    "text": "memcpy(&addr_, bytes.data(), sizeof(addr_)",
                    "rendered": {
                      "text": "memcpy(&addr_, bytes.data(), sizeof(addr_)",
                      "markdown": "`memcpy(&addr_, bytes.data(), sizeof(addr_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/ibverbs/address.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 553,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&addr_, <size of &addr_>,  bytes.data(),  sizeof(addr_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-1ef6da5f-b11f-4d95-b885-5877e996ab52",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/uv/device.cc"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 8,
                  "endLine": 89,
                  "endColumn": 74,
                  "charOffset": 2038,
                  "charLength": 66,
                  "snippet": {
                    "text": "memcpy(&attr->ai_addr, &address.address4, sizeof(address.address4)",
                    "rendered": {
                      "text": "memcpy(&attr->ai_addr, &address.address4, sizeof(address.address4)",
                      "markdown": "`memcpy(&attr->ai_addr, &address.address4, sizeof(address.address4)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/uv/device.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2038,
                        "charLength": 66
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&attr->ai_addr, <size of &attr->ai_addr>,  &address.address4,  sizeof(address.address4)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-1d06c3e7-5196-477a-8155-c1ca5f3df1e6",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/ibverbs/pair.cc"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 22,
                  "endLine": 101,
                  "endColumn": 27,
                  "charOffset": 2918,
                  "charLength": 5,
                  "snippet": {
                    "text": "rand(",
                    "rendered": {
                      "text": "rand(",
                      "markdown": "`rand(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-301dcb3a-2745-4600-ab4b-79625f3d5ebc",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/uv/address.cc"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 15,
                  "endLine": 72,
                  "endColumn": 26,
                  "charOffset": 1785,
                  "charLength": 11,
                  "snippet": {
                    "text": "strlen(str)",
                    "rendered": {
                      "text": "strlen(str)",
                      "markdown": "`strlen(str)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/uv/address.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1785,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strlen_s(str, <size of str>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/uv/address.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1785,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strnlen(str, <size of str>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-502e1f68-659c-41d3-9f8a-c4ef902b2618",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/uv/address.cc"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 2,
                  "endLine": 37,
                  "endColumn": 44,
                  "charOffset": 863,
                  "charLength": 42,
                  "snippet": {
                    "text": "memcpy(bytes.data(), &impl_, sizeof(impl_)",
                    "rendered": {
                      "text": "memcpy(bytes.data(), &impl_, sizeof(impl_)",
                      "markdown": "`memcpy(bytes.data(), &impl_, sizeof(impl_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/uv/address.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 863,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "memcpy_s(bytes.data(), <size of bytes.data()>,  &impl_,  sizeof(impl_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-3b297aca-0c3f-4b4f-be7e-8ec69afa0e76",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/uv/address.cc"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 2,
                  "endLine": 28,
                  "endColumn": 44,
                  "charOffset": 598,
                  "charLength": 42,
                  "snippet": {
                    "text": "memcpy(&impl_, bytes.data(), sizeof(impl_)",
                    "rendered": {
                      "text": "memcpy(&impl_, bytes.data(), sizeof(impl_)",
                      "markdown": "`memcpy(&impl_, bytes.data(), sizeof(impl_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/uv/address.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 598,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&impl_, <size of &impl_>,  bytes.data(),  sizeof(impl_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b22da324-e6a9-4ede-96af-fd770d0cdbf0",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/cuda_private.h"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 19,
                  "endLine": 84,
                  "endColumn": 24,
                  "charOffset": 2284,
                  "charLength": 5,
                  "snippet": {
                    "text": "rand(",
                    "rendered": {
                      "text": "rand(",
                      "markdown": "`rand(`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-7f752bb7-9777-4d18-9a45-c45bd5892921",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/cuda_private.h"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 19,
                  "endLine": 84,
                  "endColumn": 27,
                  "charOffset": 2284,
                  "charLength": 8,
                  "snippet": {
                    "text": "rand() %",
                    "rendered": {
                      "text": "rand() %",
                      "markdown": "`rand() %`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-9f1f0809-58b2-4b69-b200-1019d855e902",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/mpi/context.cc"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 4,
                  "endLine": 143,
                  "endColumn": 58,
                  "charOffset": 3773,
                  "charLength": 54,
                  "snippet": {
                    "text": "memcpy(address.data(), out.data() + offset, maxLength)",
                    "rendered": {
                      "text": "memcpy(address.data(), out.data() + offset, maxLength)",
                      "markdown": "`memcpy(address.data(), out.data() + offset, maxLength)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/mpi/context.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3773,
                        "charLength": 54
                      },
                      "insertedContent": {
                        "text": "memcpy_s(address.data(), <size of address.data()>,  out.data() + offset,  maxLength)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-67ce31a2-b999-4387-adc2-5b7bb8ba1b1f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/mpi/context.cc"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 4,
                  "endLine": 125,
                  "endColumn": 70,
                  "charOffset": 3265,
                  "charLength": 66,
                  "snippet": {
                    "text": "memcpy(in.data() + (i * maxLength), address.data(), address.size()",
                    "rendered": {
                      "text": "memcpy(in.data() + (i * maxLength), address.data(), address.size()",
                      "markdown": "`memcpy(in.data() + (i * maxLength), address.data(), address.size()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/mpi/context.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3265,
                        "charLength": 66
                      },
                      "insertedContent": {
                        "text": "memcpy_s(in.data() + (i * maxLength), <size of in.data() + (i * maxLength)>,  address.data(),  address.size()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2cd4c062-a88e-4db8-b654-2666ee80b651",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_bcube.h"
                },
                "region": {
                  "startLine": 423,
                  "startColumn": 6,
                  "endLine": 423,
                  "endColumn": 40,
                  "charOffset": 14800,
                  "charLength": 34,
                  "snippet": {
                    "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                    "rendered": {
                      "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                      "markdown": "`memcpy(ptrs_[i], ptrs_[0], bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_bcube.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 14800,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptrs_[i], <size of ptrs_[i]>,  ptrs_[0],  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-c4d6c098-3f05-4062-87f8-a7d42eb479e4",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_bcube.h"
                },
                "region": {
                  "startLine": 405,
                  "startColumn": 13,
                  "endLine": 408,
                  "endColumn": 33,
                  "charOffset": 14249,
                  "charLength": 124,
                  "snippet": {
                    "text": "memcpy(\n            &ptrs_[0][ptrOffset],\n            &recvBufs_[recvBufIdx_[srcRank]][0],\n            recvCount * sizeof(T)",
                    "rendered": {
                      "text": "memcpy(\n            &ptrs_[0][ptrOffset],\n            &recvBufs_[recvBufIdx_[srcRank]][0],\n            recvCount * sizeof(T)",
                      "markdown": "`memcpy(\n            &ptrs_[0][ptrOffset],\n            &recvBufs_[recvBufIdx_[srcRank]][0],\n            recvCount * sizeof(T)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_bcube.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 14249,
                        "charLength": 124
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n            &ptrs_[0][ptrOffset], <size of \n            &ptrs_[0][ptrOffset]>, \n            &recvBufs_[recvBufIdx_[srcRank]][0], \n            recvCount * sizeof(T)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e5d31515-ef0e-455c-aabf-a03c25c37dc9",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_bcube.h"
                },
                "region": {
                  "startLine": 350,
                  "startColumn": 8,
                  "endLine": 350,
                  "endColumn": 42,
                  "charOffset": 12135,
                  "charLength": 34,
                  "snippet": {
                    "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                    "rendered": {
                      "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                      "markdown": "`memcpy(ptrs_[i], ptrs_[0], bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_bcube.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12135,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptrs_[i], <size of ptrs_[i]>,  ptrs_[0],  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-871fd9ac-1a58-44ed-b32f-0152c2fd3ea4",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/common/linux.cc"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 2,
                  "endLine": 255,
                  "endColumn": 43,
                  "charOffset": 6233,
                  "charLength": 41,
                  "snippet": {
                    "text": "memcpy(ifr.ifr_name, ifname.c_str(), len)",
                    "rendered": {
                      "text": "memcpy(ifr.ifr_name, ifname.c_str(), len)",
                      "markdown": "`memcpy(ifr.ifr_name, ifname.c_str(), len)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/common/linux.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6233,
                        "charLength": 41
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ifr.ifr_name, <size of ifr.ifr_name>,  ifname.c_str(),  len)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2d06644c-b82a-4036-8e47-5afd89c1ac55",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/looks_like_mpi.cc"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 49,
                  "endLine": 199,
                  "endColumn": 58,
                  "charOffset": 4735,
                  "charLength": 9,
                  "snippet": {
                    "text": "localhost",
                    "rendered": {
                      "text": "localhost",
                      "markdown": "`localhost`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-7ecafa74-b651-4db2-be17-c618d1d69574",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce.cc"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 6,
                  "endLine": 92,
                  "endColumn": 17,
                  "charOffset": 3041,
                  "charLength": 141,
                  "snippet": {
                    "text": "memcpy(\n          static_cast<uint8_t*>(out[i]->ptr) + offset,\n          static_cast<const uint8_t*>(out[0]->ptr) + offset,\n          length)",
                    "rendered": {
                      "text": "memcpy(\n          static_cast<uint8_t*>(out[i]->ptr) + offset,\n          static_cast<const uint8_t*>(out[0]->ptr) + offset,\n          length)",
                      "markdown": "`memcpy(\n          static_cast<uint8_t*>(out[i]->ptr) + offset,\n          static_cast<const uint8_t*>(out[0]->ptr) + offset,\n          length)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3041,
                        "charLength": 141
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n          static_cast<uint8_t*>(out[i]->ptr) + offset, <size of \n          static_cast<uint8_t*>(out[i]->ptr) + offset>, \n          static_cast<const uint8_t*>(out[0]->ptr) + offset, \n          length)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-08c0aca5-fe5d-4dcb-8fab-8bc4fc2c4510",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/example_allreduce.cc"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 41,
                  "endLine": 130,
                  "endColumn": 59,
                  "charOffset": 4671,
                  "charLength": 18,
                  "snippet": {
                    "text": "malloc(sizeof(int)",
                    "rendered": {
                      "text": "malloc(sizeof(int)",
                      "markdown": "`malloc(sizeof(int)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/examples/example_allreduce.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4671,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-eaadab7c-73c1-40a2-9a05-5af7ce421c6e",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce.cc"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 8,
                  "endLine": 55,
                  "endColumn": 19,
                  "charOffset": 1584,
                  "charLength": 146,
                  "snippet": {
                    "text": "memcpy(\n            static_cast<uint8_t*>(out[0]->ptr) + offset,\n            static_cast<const uint8_t*>(in[0]->ptr) + offset,\n            length)",
                    "rendered": {
                      "text": "memcpy(\n            static_cast<uint8_t*>(out[0]->ptr) + offset,\n            static_cast<const uint8_t*>(in[0]->ptr) + offset,\n            length)",
                      "markdown": "`memcpy(\n            static_cast<uint8_t*>(out[0]->ptr) + offset,\n            static_cast<const uint8_t*>(in[0]->ptr) + offset,\n            length)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1584,
                        "charLength": 146
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n            static_cast<uint8_t*>(out[0]->ptr) + offset, <size of \n            static_cast<uint8_t*>(out[0]->ptr) + offset>, \n            static_cast<const uint8_t*>(in[0]->ptr) + offset, \n            length)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-1cdfb2fb-6d16-4119-b435-7e3a4c49f02a",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/example_allreduce.cc"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 40,
                  "endLine": 127,
                  "endColumn": 58,
                  "charOffset": 4543,
                  "charLength": 18,
                  "snippet": {
                    "text": "malloc(sizeof(int)",
                    "rendered": {
                      "text": "malloc(sizeof(int)",
                      "markdown": "`malloc(sizeof(int)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/examples/example_allreduce.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4543,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-5ab4b03f-56b5-4853-a42c-22b30b9ba7a0",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/example_allreduce.cc"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 54,
                  "endLine": 86,
                  "endColumn": 63,
                  "charOffset": 2679,
                  "charLength": 9,
                  "snippet": {
                    "text": "localhost",
                    "rendered": {
                      "text": "localhost",
                      "markdown": "`localhost`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-10a41522-3c27-4c97-b236-7726cc285ff1",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/example_allreduce.cc"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 15,
                  "endLine": 82,
                  "endColumn": 24,
                  "charOffset": 2463,
                  "charLength": 9,
                  "snippet": {
                    "text": "localhost",
                    "rendered": {
                      "text": "localhost",
                      "markdown": "`localhost`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-9fb66963-e2f0-47ea-9c01-daafbb55bd42",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/example_allreduce.cc"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 44,
                  "endLine": 82,
                  "endColumn": 53,
                  "charOffset": 2492,
                  "charLength": 9,
                  "snippet": {
                    "text": "127.0.0.1",
                    "rendered": {
                      "text": "127.0.0.1",
                      "markdown": "`127.0.0.1`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-550ce209-546f-4628-9e92-aaf53a52b4c7",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/example_reduce.cc"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 47,
                  "endLine": 124,
                  "endColumn": 65,
                  "charOffset": 4501,
                  "charLength": 18,
                  "snippet": {
                    "text": "malloc(sizeof(int)",
                    "rendered": {
                      "text": "malloc(sizeof(int)",
                      "markdown": "`malloc(sizeof(int)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/examples/example_reduce.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4501,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-05430f36-5446-4af4-97af-5df5b23d98a7",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/example_reduce.cc"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 46,
                  "endLine": 123,
                  "endColumn": 64,
                  "charOffset": 4428,
                  "charLength": 18,
                  "snippet": {
                    "text": "malloc(sizeof(int)",
                    "rendered": {
                      "text": "malloc(sizeof(int)",
                      "markdown": "`malloc(sizeof(int)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/examples/example_reduce.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4428,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-a72a1b10-524e-4014-b470-08691ce0ad4a",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/example_reduce.cc"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 54,
                  "endLine": 86,
                  "endColumn": 63,
                  "charOffset": 2694,
                  "charLength": 9,
                  "snippet": {
                    "text": "localhost",
                    "rendered": {
                      "text": "localhost",
                      "markdown": "`localhost`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-6a2880c3-75bd-49a5-88ef-03351e713eae",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/example_reduce.cc"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 44,
                  "endLine": 82,
                  "endColumn": 53,
                  "charOffset": 2507,
                  "charLength": 9,
                  "snippet": {
                    "text": "127.0.0.1",
                    "rendered": {
                      "text": "127.0.0.1",
                      "markdown": "`127.0.0.1`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-0fad81e3-7466-4160-9903-07a3f53068e3",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/example_reduce.cc"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 15,
                  "endLine": 82,
                  "endColumn": 24,
                  "charOffset": 2478,
                  "charLength": 9,
                  "snippet": {
                    "text": "localhost",
                    "rendered": {
                      "text": "localhost",
                      "markdown": "`localhost`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-c08cb493-564b-4310-86f8-6059eca6f825",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/broadcast.cc"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 4,
                  "endLine": 88,
                  "endColumn": 40,
                  "charOffset": 2621,
                  "charLength": 36,
                  "snippet": {
                    "text": "memcpy(out->ptr, in->ptr, out->size)",
                    "rendered": {
                      "text": "memcpy(out->ptr, in->ptr, out->size)",
                      "markdown": "`memcpy(out->ptr, in->ptr, out->size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/broadcast.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2621,
                        "charLength": 36
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out->ptr, <size of out->ptr>,  in->ptr,  out->size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ab260529-ced6-4a82-a60c-b2f6d277cca3",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/example1.cc"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 54,
                  "endLine": 71,
                  "endColumn": 63,
                  "charOffset": 2256,
                  "charLength": 9,
                  "snippet": {
                    "text": "localhost",
                    "rendered": {
                      "text": "localhost",
                      "markdown": "`localhost`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-3e4cff9e-4e2b-4fe3-ab68-55f14e656a54",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/example1.cc"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 44,
                  "endLine": 67,
                  "endColumn": 53,
                  "charOffset": 2069,
                  "charLength": 9,
                  "snippet": {
                    "text": "127.0.0.1",
                    "rendered": {
                      "text": "127.0.0.1",
                      "markdown": "`127.0.0.1`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-ff9d6ea6-8439-400a-bcb7-48aead85b9fe",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/example1.cc"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 15,
                  "endLine": 67,
                  "endColumn": 24,
                  "charOffset": 2040,
                  "charLength": 9,
                  "snippet": {
                    "text": "localhost",
                    "rendered": {
                      "text": "localhost",
                      "markdown": "`localhost`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-80b1ea22-ab2d-40bb-9006-6d1187636fd4",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/device.cc"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 4,
                  "endLine": 119,
                  "endColumn": 54,
                  "charOffset": 3267,
                  "charLength": 50,
                  "snippet": {
                    "text": "memcpy(&attr.ai_addr, rp->ai_addr, rp->ai_addrlen)",
                    "rendered": {
                      "text": "memcpy(&attr.ai_addr, rp->ai_addr, rp->ai_addrlen)",
                      "markdown": "`memcpy(&attr.ai_addr, rp->ai_addr, rp->ai_addrlen)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/tcp/device.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3267,
                        "charLength": 50
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&attr.ai_addr, <size of &attr.ai_addr>,  rp->ai_addr,  rp->ai_addrlen)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e977f45c-f773-4119-b044-9ff055c29f82",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/device.cc"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 8,
                  "endLine": 49,
                  "endColumn": 61,
                  "charOffset": 1282,
                  "charLength": 53,
                  "snippet": {
                    "text": "memcpy(&attr.ai_addr, ifa->ifa_addr, attr.ai_addrlen)",
                    "rendered": {
                      "text": "memcpy(&attr.ai_addr, ifa->ifa_addr, attr.ai_addrlen)",
                      "markdown": "`memcpy(&attr.ai_addr, ifa->ifa_addr, attr.ai_addrlen)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/tcp/device.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1282,
                        "charLength": 53
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&attr.ai_addr, <size of &attr.ai_addr>,  ifa->ifa_addr,  attr.ai_addrlen)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f41c5ada-fc11-4f0e-b155-2b56e51eb9c3",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/device.cc"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 8,
                  "endLine": 71,
                  "endColumn": 61,
                  "charOffset": 1994,
                  "charLength": 53,
                  "snippet": {
                    "text": "memcpy(&attr.ai_addr, ifa->ifa_addr, attr.ai_addrlen)",
                    "rendered": {
                      "text": "memcpy(&attr.ai_addr, ifa->ifa_addr, attr.ai_addrlen)",
                      "markdown": "`memcpy(&attr.ai_addr, ifa->ifa_addr, attr.ai_addrlen)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/tcp/device.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1994,
                        "charLength": 53
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&attr.ai_addr, <size of &attr.ai_addr>,  ifa->ifa_addr,  attr.ai_addrlen)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-01a105be-8407-40f2-823a-eebabd46c739",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/device.cc"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 8,
                  "endLine": 56,
                  "endColumn": 61,
                  "charOffset": 1518,
                  "charLength": 53,
                  "snippet": {
                    "text": "memcpy(&attr.ai_addr, ifa->ifa_addr, attr.ai_addrlen)",
                    "rendered": {
                      "text": "memcpy(&attr.ai_addr, ifa->ifa_addr, attr.ai_addrlen)",
                      "markdown": "`memcpy(&attr.ai_addr, ifa->ifa_addr, attr.ai_addrlen)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/tcp/device.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1518,
                        "charLength": 53
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&attr.ai_addr, <size of &attr.ai_addr>,  ifa->ifa_addr,  attr.ai_addrlen)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ff3dd124-d2b3-4a5a-881e-5825aa4e668c",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/alltoall.cc"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 2,
                  "endLine": 40,
                  "endColumn": 16,
                  "charOffset": 992,
                  "charLength": 137,
                  "snippet": {
                    "text": "memcpy(\n      static_cast<char*>(out->ptr) + myRank * chunkSize,\n      static_cast<char*>(in->ptr) + myRank * chunkSize,\n      chunkSize)",
                    "rendered": {
                      "text": "memcpy(\n      static_cast<char*>(out->ptr) + myRank * chunkSize,\n      static_cast<char*>(in->ptr) + myRank * chunkSize,\n      chunkSize)",
                      "markdown": "`memcpy(\n      static_cast<char*>(out->ptr) + myRank * chunkSize,\n      static_cast<char*>(in->ptr) + myRank * chunkSize,\n      chunkSize)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/alltoall.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 992,
                        "charLength": 137
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n      static_cast<char*>(out->ptr) + myRank * chunkSize, <size of \n      static_cast<char*>(out->ptr) + myRank * chunkSize>, \n      static_cast<char*>(in->ptr) + myRank * chunkSize, \n      chunkSize)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-42bf329d-da83-43d7-8f37-0df369fdca18",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allgather.cc"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 53,
                  "endColumn": 17,
                  "charOffset": 1654,
                  "charLength": 133,
                  "snippet": {
                    "text": "memcpy(\n        static_cast<uint8_t*>(out->ptr) + context->rank * in->size,\n        static_cast<uint8_t*>(in->ptr),\n        in->size)",
                    "rendered": {
                      "text": "memcpy(\n        static_cast<uint8_t*>(out->ptr) + context->rank * in->size,\n        static_cast<uint8_t*>(in->ptr),\n        in->size)",
                      "markdown": "`memcpy(\n        static_cast<uint8_t*>(out->ptr) + context->rank * in->size,\n        static_cast<uint8_t*>(in->ptr),\n        in->size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allgather.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1654,
                        "charLength": 133
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n        static_cast<uint8_t*>(out->ptr) + context->rank * in->size, <size of \n        static_cast<uint8_t*>(out->ptr) + context->rank * in->size>, \n        static_cast<uint8_t*>(in->ptr), \n        in->size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d3b706c0-79c4-4787-96af-3edf873378fc",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/benchmark/options.cc"
                },
                "region": {
                  "startLine": 344,
                  "startColumn": 44,
                  "endLine": 344,
                  "endColumn": 58,
                  "charOffset": 10528,
                  "charLength": 14,
                  "snippet": {
                    "text": "strlen(optarg)",
                    "rendered": {
                      "text": "strlen(optarg)",
                      "markdown": "`strlen(optarg)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10528,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strlen_s(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10528,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strnlen(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f9041ef0-d997-42ee-80d6-8521bace5265",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/benchmark/options.cc"
                },
                "region": {
                  "startLine": 339,
                  "startColumn": 44,
                  "endLine": 339,
                  "endColumn": 58,
                  "charOffset": 10404,
                  "charLength": 14,
                  "snippet": {
                    "text": "strlen(optarg)",
                    "rendered": {
                      "text": "strlen(optarg)",
                      "markdown": "`strlen(optarg)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10404,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strlen_s(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10404,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strnlen(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2e0a50d9-87e3-47bd-bc1d-745c8fe08dbf",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/benchmark/options.cc"
                },
                "region": {
                  "startLine": 334,
                  "startColumn": 42,
                  "endLine": 334,
                  "endColumn": 56,
                  "charOffset": 10280,
                  "charLength": 14,
                  "snippet": {
                    "text": "strlen(optarg)",
                    "rendered": {
                      "text": "strlen(optarg)",
                      "markdown": "`strlen(optarg)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10280,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strlen_s(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10280,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strnlen(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-c3cd66e6-8fd3-4f32-b9f7-7fee3e5cb142",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/benchmark/options.cc"
                },
                "region": {
                  "startLine": 329,
                  "startColumn": 42,
                  "endLine": 329,
                  "endColumn": 56,
                  "charOffset": 10161,
                  "charLength": 14,
                  "snippet": {
                    "text": "strlen(optarg)",
                    "rendered": {
                      "text": "strlen(optarg)",
                      "markdown": "`strlen(optarg)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10161,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strlen_s(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10161,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strnlen(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-fea3bac1-60b4-4365-995c-f9ae12566de7",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/benchmark/options.cc"
                },
                "region": {
                  "startLine": 319,
                  "startColumn": 48,
                  "endLine": 319,
                  "endColumn": 62,
                  "charOffset": 9938,
                  "charLength": 14,
                  "snippet": {
                    "text": "strlen(optarg)",
                    "rendered": {
                      "text": "strlen(optarg)",
                      "markdown": "`strlen(optarg)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9938,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strlen_s(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9938,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strnlen(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-02f7fa7d-196b-451d-8bd4-292f6b056a6b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/benchmark/options.cc"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 47,
                  "endLine": 213,
                  "endColumn": 61,
                  "charOffset": 7592,
                  "charLength": 14,
                  "snippet": {
                    "text": "strlen(optarg)",
                    "rendered": {
                      "text": "strlen(optarg)",
                      "markdown": "`strlen(optarg)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7592,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strlen_s(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7592,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strnlen(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-8d7c990a-ccfc-45a4-b0fd-6f6382e90240",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/benchmark/options.cc"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 47,
                  "endLine": 201,
                  "endColumn": 61,
                  "charOffset": 7303,
                  "charLength": 14,
                  "snippet": {
                    "text": "strlen(optarg)",
                    "rendered": {
                      "text": "strlen(optarg)",
                      "markdown": "`strlen(optarg)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7303,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strlen_s(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7303,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strnlen(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-23405aca-47b6-45f4-8e82-b222da1dfb7d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/benchmark/options.cc"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 44,
                  "endLine": 209,
                  "endColumn": 58,
                  "charOffset": 7487,
                  "charLength": 14,
                  "snippet": {
                    "text": "strlen(optarg)",
                    "rendered": {
                      "text": "strlen(optarg)",
                      "markdown": "`strlen(optarg)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7487,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strlen_s(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7487,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strnlen(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-97e1f321-c755-4395-b1bf-7b225ae72beb",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/address.cc"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 15,
                  "endLine": 76,
                  "endColumn": 26,
                  "charOffset": 1986,
                  "charLength": 11,
                  "snippet": {
                    "text": "strlen(str)",
                    "rendered": {
                      "text": "strlen(str)",
                      "markdown": "`strlen(str)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/tcp/address.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1986,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strlen_s(str, <size of str>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/tcp/address.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1986,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strnlen(str, <size of str>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-fa5f171a-bafd-43fb-982f-c89ff13d2f5d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/address.cc"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 2,
                  "endLine": 55,
                  "endColumn": 44,
                  "charOffset": 1343,
                  "charLength": 42,
                  "snippet": {
                    "text": "memcpy(bytes.data(), &impl_, sizeof(impl_)",
                    "rendered": {
                      "text": "memcpy(bytes.data(), &impl_, sizeof(impl_)",
                      "markdown": "`memcpy(bytes.data(), &impl_, sizeof(impl_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/tcp/address.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1343,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "memcpy_s(bytes.data(), <size of bytes.data()>,  &impl_,  sizeof(impl_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-27d7155f-4bd1-482b-8a01-6ec1d56d2fed",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/address.cc"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 2,
                  "endLine": 27,
                  "endColumn": 34,
                  "charOffset": 592,
                  "charLength": 32,
                  "snippet": {
                    "text": "memcpy(&impl_.ss, addr, addrlen)",
                    "rendered": {
                      "text": "memcpy(&impl_.ss, addr, addrlen)",
                      "markdown": "`memcpy(&impl_.ss, addr, addrlen)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/tcp/address.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 592,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&impl_.ss, <size of &impl_.ss>,  addr,  addrlen)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-6ecc84b1-4102-4b55-a1cd-bec9bd54c8f3",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/address.cc"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 2,
                  "endLine": 46,
                  "endColumn": 44,
                  "charOffset": 1078,
                  "charLength": 42,
                  "snippet": {
                    "text": "memcpy(&impl_, bytes.data(), sizeof(impl_)",
                    "rendered": {
                      "text": "memcpy(&impl_, bytes.data(), sizeof(impl_)",
                      "markdown": "`memcpy(&impl_, bytes.data(), sizeof(impl_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/tcp/address.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1078,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&impl_, <size of &impl_>,  bytes.data(),  sizeof(impl_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-21d4b54f-88b9-49e4-ac3d-99744d120517",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_local.cc"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 4,
                  "endLine": 36,
                  "endColumn": 38,
                  "charOffset": 859,
                  "charLength": 34,
                  "snippet": {
                    "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                    "rendered": {
                      "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                      "markdown": "`memcpy(ptrs_[i], ptrs_[0], bytes_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_local.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 859,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptrs_[i], <size of ptrs_[i]>,  ptrs_[0],  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-1cde403b-9ea8-4ded-91e5-d906f543f14d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_halving_doubling.h"
                },
                "region": {
                  "startLine": 345,
                  "startColumn": 6,
                  "endLine": 345,
                  "endColumn": 40,
                  "charOffset": 12597,
                  "charLength": 34,
                  "snippet": {
                    "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                    "rendered": {
                      "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                      "markdown": "`memcpy(ptrs_[i], ptrs_[0], bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_halving_doubling.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12597,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptrs_[i], <size of ptrs_[i]>,  ptrs_[0],  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f635497a-3dc3-4093-8702-db40b3677a67",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_halving_doubling.h"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 8,
                  "endLine": 334,
                  "endColumn": 38,
                  "charOffset": 12197,
                  "charLength": 123,
                  "snippet": {
                    "text": "memcpy(\n            &ptrs_[0][sendOffsets_[i]],\n            &recvBuf_[bufferOffset],\n            sendCounts_[i] * sizeof(T)",
                    "rendered": {
                      "text": "memcpy(\n            &ptrs_[0][sendOffsets_[i]],\n            &recvBuf_[bufferOffset],\n            sendCounts_[i] * sizeof(T)",
                      "markdown": "`memcpy(\n            &ptrs_[0][sendOffsets_[i]],\n            &recvBuf_[bufferOffset],\n            sendCounts_[i] * sizeof(T)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_halving_doubling.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12197,
                        "charLength": 123
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n            &ptrs_[0][sendOffsets_[i]], <size of \n            &ptrs_[0][sendOffsets_[i]]>, \n            &recvBuf_[bufferOffset], \n            sendCounts_[i] * sizeof(T)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-c660c180-c104-414e-8583-b99c1b652569",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_halving_doubling.h"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 6,
                  "endLine": 304,
                  "endColumn": 38,
                  "charOffset": 11097,
                  "charLength": 110,
                  "snippet": {
                    "text": "memcpy(\n          &ptrs_[0][offset],\n          &recvBuf_[bufferOffset],\n          totalItemsToSend * sizeof(T)",
                    "rendered": {
                      "text": "memcpy(\n          &ptrs_[0][offset],\n          &recvBuf_[bufferOffset],\n          totalItemsToSend * sizeof(T)",
                      "markdown": "`memcpy(\n          &ptrs_[0][offset],\n          &recvBuf_[bufferOffset],\n          totalItemsToSend * sizeof(T)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_halving_doubling.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11097,
                        "charLength": 110
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n          &ptrs_[0][offset], <size of \n          &ptrs_[0][offset]>, \n          &recvBuf_[bufferOffset], \n          totalItemsToSend * sizeof(T)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d9952244-c4c5-43a7-8f55-51753b729e60",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_halving_doubling.h"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 8,
                  "endLine": 238,
                  "endColumn": 42,
                  "charOffset": 8797,
                  "charLength": 34,
                  "snippet": {
                    "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                    "rendered": {
                      "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                      "markdown": "`memcpy(ptrs_[i], ptrs_[0], bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_halving_doubling.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8797,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptrs_[i], <size of ptrs_[i]>,  ptrs_[0],  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-a4b41aec-89ef-4c83-aa08-56764f2dba4d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/scatter.cc"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 4,
                  "endLine": 48,
                  "endColumn": 55,
                  "charOffset": 1334,
                  "charLength": 51,
                  "snippet": {
                    "text": "memcpy(out->ptr, in[context->rank]->ptr, out->size)",
                    "rendered": {
                      "text": "memcpy(out->ptr, in[context->rank]->ptr, out->size)",
                      "markdown": "`memcpy(out->ptr, in[context->rank]->ptr, out->size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/scatter.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1334,
                        "charLength": 51
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out->ptr, <size of out->ptr>,  in[context->rank]->ptr,  out->size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-399b6f3c-9b6e-4fb8-9086-f01d23e2a1ba",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/gather.cc"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 4,
                  "endLine": 47,
                  "endColumn": 18,
                  "charOffset": 1141,
                  "charLength": 111,
                  "snippet": {
                    "text": "memcpy(\n        static_cast<char*>(out->ptr) + (context->rank * chunkSize),\n        in->ptr,\n        chunkSize)",
                    "rendered": {
                      "text": "memcpy(\n        static_cast<char*>(out->ptr) + (context->rank * chunkSize),\n        in->ptr,\n        chunkSize)",
                      "markdown": "`memcpy(\n        static_cast<char*>(out->ptr) + (context->rank * chunkSize),\n        in->ptr,\n        chunkSize)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/gather.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1141,
                        "charLength": 111
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n        static_cast<char*>(out->ptr) + (context->rank * chunkSize), <size of \n        static_cast<char*>(out->ptr) + (context->rank * chunkSize)>, \n        in->ptr, \n        chunkSize)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-5238c40b-1dcb-4f16-bad7-ad9c484f8d75",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allgatherv.cc"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 6,
                  "endLine": 110,
                  "endColumn": 19,
                  "charOffset": 3465,
                  "charLength": 141,
                  "snippet": {
                    "text": "memcpy(\n          static_cast<uint8_t*>(out->ptr) + byteOffsets[context->rank],\n          static_cast<uint8_t*>(in->ptr),\n          in->size)",
                    "rendered": {
                      "text": "memcpy(\n          static_cast<uint8_t*>(out->ptr) + byteOffsets[context->rank],\n          static_cast<uint8_t*>(in->ptr),\n          in->size)",
                      "markdown": "`memcpy(\n          static_cast<uint8_t*>(out->ptr) + byteOffsets[context->rank],\n          static_cast<uint8_t*>(in->ptr),\n          in->size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allgatherv.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3465,
                        "charLength": 141
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n          static_cast<uint8_t*>(out->ptr) + byteOffsets[context->rank], <size of \n          static_cast<uint8_t*>(out->ptr) + byteOffsets[context->rank]>, \n          static_cast<uint8_t*>(in->ptr), \n          in->size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}