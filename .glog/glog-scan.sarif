{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "glog-85d39a98-4cd0-42ab-8ec9-dcb8a42880e4",
              "name": "OpensslHardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "OpenSSL: Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "OpenSSL: Hard-coded SSL/TLS Protocol: OpenSSL: Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440001.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440001.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440001.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440011"
                ]
              }
            },
            {
              "id": "glog-75a2bd57-97af-4417-bb8b-e4b5ec46ef13",
              "name": "Win32HardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol: Win32 - Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440077"
                ]
              }
            },
            {
              "id": "glog-7a0487d2-55d4-45c2-b5e6-cf93a5c71d5e",
              "name": "OpensslDoNotHardcodeSsltlsVersionsWithinAnApplication",
              "shortDescription": {
                "text": "SSL/TLS version usage should be based on an OS or external configuration."
              },
              "fullDescription": {
                "text": "OpenSSL: Do not hardcode SSL/TLS versions within an application.: SSL/TLS version usage should be based on an OS or external configuration."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "SSL/TLS version usage should be based on an OS or external configuration.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS440010"
                ]
              }
            },
            {
              "id": "glog-50d34a8e-9046-4f47-a71e-dbd532e1ca5c",
              "name": "OpensslDoNotHardcodeSsltlsVersionsWithinAnApplication",
              "shortDescription": {
                "text": "SSL/TLS version usage should be based on an OS or external configuration."
              },
              "fullDescription": {
                "text": "OpenSSL: Do not hardcode SSL/TLS versions within an application.: SSL/TLS version usage should be based on an OS or external configuration."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "SSL/TLS version usage should be based on an OS or external configuration.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "Important",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "warning",
                "tags": [
                  "DS440010"
                ]
              }
            },
            {
              "id": "glog-b0769e9f-267b-4283-80fc-cea7ff3e790d",
              "name": "Win32HardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol: Win32 - Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440077"
                ]
              }
            },
            {
              "id": "glog-7c294c55-b307-40b8-9aee-e57f4f8ec861",
              "name": "Win32HardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol: Win32 - Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440077"
                ]
              }
            },
            {
              "id": "glog-adce7af1-699d-4615-b073-eef4a523c2f5",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-659dd352-896a-4c66-b7f1-b9b38c274f94",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS162092"
                ]
              }
            },
            {
              "id": "glog-644f9fa6-8fec-4ea5-bf2a-927ca620cc0f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-91066730-4f43-4927-b940-353fa58dc0db",
              "name": "Win32HardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol: Win32 - Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440077"
                ]
              }
            },
            {
              "id": "glog-378d4f50-51c9-408a-9dc7-d018676df963",
              "name": "Win32HardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol: Win32 - Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440077"
                ]
              }
            },
            {
              "id": "glog-0c5cfd7b-bcda-4a38-ac06-82ef3f5d403e",
              "name": "Win32HardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol: Win32 - Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440077"
                ]
              }
            },
            {
              "id": "glog-4214dac2-6804-45f4-b24c-c8dc9390bf41",
              "name": "Win32HardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol: Win32 - Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440077"
                ]
              }
            },
            {
              "id": "glog-b41b25ca-1629-4cb0-a1c3-1a3427c72dca",
              "name": "Win32HardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol: Win32 - Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440077"
                ]
              }
            },
            {
              "id": "glog-b400701b-b16d-4881-810c-2446d9c2d40d",
              "name": "Win32HardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol: Win32 - Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440077"
                ]
              }
            },
            {
              "id": "glog-794d1f4b-5dd2-4b51-b4e9-9e539d4e4dfa",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-4dc6df4f-9f7c-4660-a5fc-f6a3234f112d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-25f60b77-7c7f-41a0-a44c-a62718d46804",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-ce8c6b9d-3e81-49b3-b2c1-bb8cd898b762",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-333e5f53-4720-41eb-935d-5649c8b83b37",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-48eb4627-065c-4993-9a4a-df0a766fec50",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-c93eeb36-cdc4-49c4-aa70-d4375f56d712",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-e1262021-57cf-4cef-b4b2-c515cfb2cb4a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-fa730572-d2b4-49f2-8415-b24fe9d433ef",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-2be07d59-eec0-400b-b172-78d6b5901355",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-e9f40b47-d310-4310-9ac5-e3911a0523c0",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-5f73621e-04b8-4854-b0ce-be0383a57356",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-49e27cd5-0f7a-4c9e-a8bb-1f7faf1850ca",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-a025eb41-2c23-4361-b7b2-ae1659412652",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-44ac7dd5-2430-471f-8c27-1c8a66d35e33",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS162092"
                ]
              }
            },
            {
              "id": "glog-10c21cea-0e09-4561-ad2a-021eed43a1c1",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-e91ffdad-a84c-4156-bee4-d91b37d38aa7",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-acb1caca-88c1-4805-83c2-958970f2aac9",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-08bb5722-fe5c-4431-b2d7-121d093fc1f2",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS162092"
                ]
              }
            },
            {
              "id": "glog-fc1b50ca-49ca-47ce-91fe-39062694e64f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS162092"
                ]
              }
            },
            {
              "id": "glog-75c45dd2-21d7-44fc-8250-22a99e5a2139",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS162092"
                ]
              }
            },
            {
              "id": "glog-f7eec3ca-a196-4eab-921d-ff414a5d526b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-c8635618-6eba-4c41-9321-cc9a6efed5b7",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-4e56368f-a3f3-464c-9245-c62bbe54a35e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-0f2d19e6-a515-4f3e-a7af-0448c1867736",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-b8ca19f6-62d7-49c1-8f0c-99dc3b3a30b4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-7385283e-9766-479c-8daa-b3f6edc49910",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-204654ee-f7c5-4056-8ac8-b96ac8890fbe",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-81ff5e3d-90ff-4c77-9ba9-4db18e9d0e85",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-7e122eea-5d3b-4d79-98e8-86ee2fa6337b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-b8bebc17-d210-4d81-9677-d6bf08eaaa0b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-42a5ca94-e1f8-419f-b18c-2a8396f0be19",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-b3679f37-42eb-49ee-8651-50a412318397",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS162092"
                ]
              }
            },
            {
              "id": "glog-1d16d92d-e9df-4b37-94d9-627252b83360",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS162092"
                ]
              }
            },
            {
              "id": "glog-228c1880-ed3a-4f21-a78f-a0c56671914b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS162092"
                ]
              }
            },
            {
              "id": "glog-1ca8ca14-085c-4686-93a7-7d8283405359",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-645d88f5-946b-4ce4-9b71-7024356be198",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS162092"
                ]
              }
            },
            {
              "id": "glog-4d852780-9ef3-4573-b7e6-7ecc39833019",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS162092"
                ]
              }
            },
            {
              "id": "glog-920685fc-3be1-4f5a-8684-e6e3dc50e0e9",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS162092"
                ]
              }
            },
            {
              "id": "glog-d2e9c58a-ba92-4cb2-a1a9-8a1fc6e35ca6",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-ccb3cd74-f879-40c8-ad84-1e9b2c7a191d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-3589c5ba-fba9-4428-999d-4612a7c58d66",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-0871696e-9061-4a11-9593-b2a78ca2a79b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-b6c29c77-ce3e-40bd-950d-66d6e4f11c05",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-862229cc-f1e4-4c4b-8897-51082a33f4e9",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-d2799616-0c35-46f8-9cd6-6e7ca8fe19e6",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-033c675a-bcf3-4c34-87e3-bd41ad51890e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-2a31fe8f-7db2-43d1-9d80-f06de3611966",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-59255250-91b9-41e4-9864-fbe2de464ffe",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-4f696fe7-bb53-46fe-be3a-bdbc99f64149",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-bcfb38cb-3615-44ac-930f-38e4936eccfc",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-30641cce-eed5-4720-86f5-ec5e5ef48ec8",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-54540ba5-9517-4944-be55-6143a0db5d02",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-2d109d22-3793-4bbc-b88b-66bc7a5f3497",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-fdec64ca-eab8-4827-8b41-adba3350ca92",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-64e5754e-3630-4bdf-b479-54f378a23bf5",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-6abbd0f1-5388-4203-b04e-e62c1ca66b4d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-db0093b6-95d2-4fe2-9e9a-25b6596fc329",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-15c1b349-faff-46bd-bcb6-3e805f70c7f2",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-955c940a-9771-4906-a019-3c2eff22a619",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-26b25c3b-c89c-411d-8cbc-e125e6902ced",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-19bc5540-f516-420b-b672-9c2202440ad4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-ded37913-6ed9-4a82-aec6-c59d778a566c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-2ddf2356-b363-426c-a51e-2f1ab291d343",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-2936bfa9-3b4f-457a-bed8-f8a7b8d841fb",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-212fc468-d330-4a00-b578-b23c81a57e27",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-048a4c46-ec2b-413d-a260-dd6d10a567c7",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-05793445-0bc3-40e3-af28-6c0ec013738d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-9e37b80e-4ff0-47b5-9cf0-67cdfa36e0c5",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-51adfba1-6b73-457a-9f0d-13d5d0844120",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-afcb63d8-adb9-45d9-81c2-811f1fb2f7d3",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-0ab8f513-954f-4635-9dd1-253371ead900",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-96dbaa3d-8405-41b1-9cc0-14afb45de7cb",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-541f4c8e-80fe-4f62-87cc-22158ad053f2",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-8efeb118-8035-499a-bff9-4116d6b26e14",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-6dedf95f-3de7-4df3-8622-01de532b4dbc",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-e58264f1-86fc-452e-b20e-2490ced4a5ed",
              "name": "Win32HardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol: Win32 - Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440077"
                ]
              }
            },
            {
              "id": "glog-fe064fc6-b053-4e22-84d0-918c54a12c1f",
              "name": "Win32HardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol: Win32 - Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440077"
                ]
              }
            },
            {
              "id": "glog-b40e58dd-95a4-4892-a16a-4f03037afaab",
              "name": "Win32HardcodedSsltlsProtocol",
              "shortDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol"
              },
              "fullDescription": {
                "text": "Win32 - Hard-coded SSL/TLS Protocol: Win32 - Hard-coded SSL/TLS Protocol"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "helpUri": "https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md",
              "help": {
                "text": "Review to ensure that a TLS protocol agility is maintained.",
                "markdown": "Visit [https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md](https://github.com/Microsoft/DevSkim/blob/main/guidance/DS440000.md) for guidance on this issue."
              },
              "properties": {
                "DevSkimSeverity": "ManualReview",
                "DevSkimConfidence": "High",
                "precision": "high",
                "problem.severity": "recommendation",
                "tags": [
                  "DS440077"
                ]
              }
            },
            {
              "id": "glog-2c934ab9-2a74-489d-a04d-6865356867ce",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-7b996e44-4f05-45cb-9eaf-a72ff75dbd37",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-208556f7-2750-483f-b3d8-ae37ab749301",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "glog-85d39a98-4cd0-42ab-8ec9-dcb8a42880e4",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "OpenSSL: Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/context.cc"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 16,
                  "endLine": 65,
                  "endColumn": 45,
                  "charOffset": 2313,
                  "charLength": 29,
                  "snippet": {
                    "text": "SSL_CTX_set_min_proto_version",
                    "rendered": {
                      "text": "SSL_CTX_set_min_proto_version",
                      "markdown": "`SSL_CTX_set_min_proto_version`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-75a2bd57-97af-4417-bb8b-e4b5ec46ef13",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Win32 - Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/context.cc"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 16,
                  "endLine": 65,
                  "endColumn": 45,
                  "charOffset": 2313,
                  "charLength": 29,
                  "snippet": {
                    "text": "SSL_CTX_set_min_proto_version",
                    "rendered": {
                      "text": "SSL_CTX_set_min_proto_version",
                      "markdown": "`SSL_CTX_set_min_proto_version`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-7a0487d2-55d4-45c2-b5e6-cf93a5c71d5e",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "OpenSSL: Do not hardcode SSL/TLS versions within an application."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/context.cc"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 43,
                  "endLine": 70,
                  "endColumn": 71,
                  "charOffset": 2548,
                  "charLength": 28,
                  "snippet": {
                    "text": "SSL_OP_LEGACY_SERVER_CONNECT",
                    "rendered": {
                      "text": "SSL_OP_LEGACY_SERVER_CONNECT",
                      "markdown": "`SSL_OP_LEGACY_SERVER_CONNECT`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hardcoded"
            ]
          }
        },
        {
          "ruleId": "glog-50d34a8e-9046-4f47-a71e-dbd532e1ca5c",
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "OpenSSL: Do not hardcode SSL/TLS versions within an application."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/context.cc"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 16,
                  "endLine": 65,
                  "endColumn": 45,
                  "charOffset": 2313,
                  "charLength": 29,
                  "snippet": {
                    "text": "SSL_CTX_set_min_proto_version",
                    "rendered": {
                      "text": "SSL_CTX_set_min_proto_version",
                      "markdown": "`SSL_CTX_set_min_proto_version`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hardcoded"
            ]
          }
        },
        {
          "ruleId": "glog-b0769e9f-267b-4283-80fc-cea7ff3e790d",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Win32 - Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/context.cc"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 12,
                  "endLine": 91,
                  "endColumn": 38,
                  "charOffset": 3456,
                  "charLength": 26,
                  "snippet": {
                    "text": "SSL_CTX_set_security_level",
                    "rendered": {
                      "text": "SSL_CTX_set_security_level",
                      "markdown": "`SSL_CTX_set_security_level`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-7c294c55-b307-40b8-9aee-e57f4f8ec861",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Win32 - Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/context.cc"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 53,
                  "endLine": 62,
                  "endColumn": 63,
                  "charOffset": 2208,
                  "charLength": 10,
                  "snippet": {
                    "text": "TLS_method",
                    "rendered": {
                      "text": "TLS_method",
                      "markdown": "`TLS_method`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-7f8b6c85-efdc-4fd1-bec9-d91a77d1e51b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/mpi/example/main_managed.cc"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 49,
                  "endLine": 18,
                  "endColumn": 58,
                  "charOffset": 497,
                  "charLength": 9,
                  "snippet": {
                    "text": "localhost",
                    "rendered": {
                      "text": "localhost",
                      "markdown": "`localhost`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-adce7af1-699d-4615-b073-eef4a523c2f5",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/uv/libuv.h"
                },
                "region": {
                  "startLine": 638,
                  "startColumn": 9,
                  "endLine": 638,
                  "endColumn": 41,
                  "charOffset": 15723,
                  "charLength": 32,
                  "snippet": {
                    "text": "memcpy(data.get(), &t, sizeof(T)",
                    "rendered": {
                      "text": "memcpy(data.get(), &t, sizeof(T)",
                      "markdown": "`memcpy(data.get(), &t, sizeof(T)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/uv/libuv.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 15723,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "memcpy_s(data.get(), <size of data.get()>,  &t,  sizeof(T)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-659dd352-896a-4c66-b7f1-b9b38c274f94",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/mpi/example/main_unmanaged.cc"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 49,
                  "endLine": 23,
                  "endColumn": 58,
                  "charOffset": 561,
                  "charLength": 9,
                  "snippet": {
                    "text": "localhost",
                    "rendered": {
                      "text": "localhost",
                      "markdown": "`localhost`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-644f9fa6-8fec-4ea5-bf2a-927ca620cc0f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/uv/device.cc"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 4,
                  "endLine": 142,
                  "endColumn": 54,
                  "charOffset": 3362,
                  "charLength": 50,
                  "snippet": {
                    "text": "memcpy(&attr.ai_addr, rp->ai_addr, rp->ai_addrlen)",
                    "rendered": {
                      "text": "memcpy(&attr.ai_addr, rp->ai_addr, rp->ai_addrlen)",
                      "markdown": "`memcpy(&attr.ai_addr, rp->ai_addr, rp->ai_addrlen)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/uv/device.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3362,
                        "charLength": 50
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&attr.ai_addr, <size of &attr.ai_addr>,  rp->ai_addr,  rp->ai_addrlen)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-91066730-4f43-4927-b940-353fa58dc0db",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Win32 - Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/openssl.cc"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 11,
                  "endLine": 52,
                  "endColumn": 37,
                  "charOffset": 1501,
                  "charLength": 26,
                  "snippet": {
                    "text": "SSL_CTX_set_security_level",
                    "rendered": {
                      "text": "SSL_CTX_set_security_level",
                      "markdown": "`SSL_CTX_set_security_level`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-378d4f50-51c9-408a-9dc7-d018676df963",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Win32 - Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/openssl.cc"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 5,
                  "endLine": 51,
                  "endColumn": 31,
                  "charOffset": 1436,
                  "charLength": 26,
                  "snippet": {
                    "text": "SSL_CTX_set_security_level",
                    "rendered": {
                      "text": "SSL_CTX_set_security_level",
                      "markdown": "`SSL_CTX_set_security_level`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-0c5cfd7b-bcda-4a38-ac06-82ef3f5d403e",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Win32 - Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/openssl.cc"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 11,
                  "endLine": 34,
                  "endColumn": 22,
                  "charOffset": 996,
                  "charLength": 11,
                  "snippet": {
                    "text": "SSL_CTX_new",
                    "rendered": {
                      "text": "SSL_CTX_new",
                      "markdown": "`SSL_CTX_new`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-4214dac2-6804-45f4-b24c-c8dc9390bf41",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Win32 - Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/openssl.cc"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 9,
                  "endLine": 33,
                  "endColumn": 20,
                  "charOffset": 945,
                  "charLength": 11,
                  "snippet": {
                    "text": "SSL_CTX_new",
                    "rendered": {
                      "text": "SSL_CTX_new",
                      "markdown": "`SSL_CTX_new`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-b41b25ca-1629-4cb0-a1c3-1a3427c72dca",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Win32 - Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/openssl.cc"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 46,
                  "endLine": 31,
                  "endColumn": 56,
                  "charOffset": 920,
                  "charLength": 10,
                  "snippet": {
                    "text": "TLS_method",
                    "rendered": {
                      "text": "TLS_method",
                      "markdown": "`TLS_method`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-b400701b-b16d-4881-810c-2446d9c2d40d",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Win32 - Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/openssl.cc"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 18,
                  "endLine": 31,
                  "endColumn": 28,
                  "charOffset": 892,
                  "charLength": 10,
                  "snippet": {
                    "text": "TLS_method",
                    "rendered": {
                      "text": "TLS_method",
                      "markdown": "`TLS_method`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-794d1f4b-5dd2-4b51-b4e9-9e539d4e4dfa",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/uv/device.cc"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 8,
                  "endLine": 89,
                  "endColumn": 74,
                  "charOffset": 2038,
                  "charLength": 66,
                  "snippet": {
                    "text": "memcpy(&attr->ai_addr, &address.address4, sizeof(address.address4)",
                    "rendered": {
                      "text": "memcpy(&attr->ai_addr, &address.address4, sizeof(address.address4)",
                      "markdown": "`memcpy(&attr->ai_addr, &address.address4, sizeof(address.address4)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/uv/device.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2038,
                        "charLength": 66
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&attr->ai_addr, <size of &attr->ai_addr>,  &address.address4,  sizeof(address.address4)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-4dc6df4f-9f7c-4660-a5fc-f6a3234f112d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/uv/device.cc"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 8,
                  "endLine": 96,
                  "endColumn": 74,
                  "charOffset": 2309,
                  "charLength": 66,
                  "snippet": {
                    "text": "memcpy(&attr->ai_addr, &address.address6, sizeof(address.address6)",
                    "rendered": {
                      "text": "memcpy(&attr->ai_addr, &address.address6, sizeof(address.address6)",
                      "markdown": "`memcpy(&attr->ai_addr, &address.address6, sizeof(address.address6)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/uv/device.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2309,
                        "charLength": 66
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&attr->ai_addr, <size of &attr->ai_addr>,  &address.address6,  sizeof(address.address6)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-25f60b77-7c7f-41a0-a44c-a62718d46804",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_local.cc"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 4,
                  "endLine": 36,
                  "endColumn": 38,
                  "charOffset": 859,
                  "charLength": 34,
                  "snippet": {
                    "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                    "rendered": {
                      "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                      "markdown": "`memcpy(ptrs_[i], ptrs_[0], bytes_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_local.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 859,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptrs_[i], <size of ptrs_[i]>,  ptrs_[0],  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ce8c6b9d-3e81-49b3-b2c1-bb8cd898b762",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_halving_doubling.h"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 8,
                  "endLine": 238,
                  "endColumn": 42,
                  "charOffset": 8797,
                  "charLength": 34,
                  "snippet": {
                    "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                    "rendered": {
                      "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                      "markdown": "`memcpy(ptrs_[i], ptrs_[0], bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_halving_doubling.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8797,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptrs_[i], <size of ptrs_[i]>,  ptrs_[0],  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-333e5f53-4720-41eb-935d-5649c8b83b37",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/mpi/context.cc"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 4,
                  "endLine": 143,
                  "endColumn": 58,
                  "charOffset": 3773,
                  "charLength": 54,
                  "snippet": {
                    "text": "memcpy(address.data(), out.data() + offset, maxLength)",
                    "rendered": {
                      "text": "memcpy(address.data(), out.data() + offset, maxLength)",
                      "markdown": "`memcpy(address.data(), out.data() + offset, maxLength)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/mpi/context.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3773,
                        "charLength": 54
                      },
                      "insertedContent": {
                        "text": "memcpy_s(address.data(), <size of address.data()>,  out.data() + offset,  maxLength)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-48eb4627-065c-4993-9a4a-df0a766fec50",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/mpi/context.cc"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 4,
                  "endLine": 125,
                  "endColumn": 70,
                  "charOffset": 3265,
                  "charLength": 66,
                  "snippet": {
                    "text": "memcpy(in.data() + (i * maxLength), address.data(), address.size()",
                    "rendered": {
                      "text": "memcpy(in.data() + (i * maxLength), address.data(), address.size()",
                      "markdown": "`memcpy(in.data() + (i * maxLength), address.data(), address.size()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/mpi/context.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3265,
                        "charLength": 66
                      },
                      "insertedContent": {
                        "text": "memcpy_s(in.data() + (i * maxLength), <size of in.data() + (i * maxLength)>,  address.data(),  address.size()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-c93eeb36-cdc4-49c4-aa70-d4375f56d712",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/uv/address.cc"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 15,
                  "endLine": 72,
                  "endColumn": 26,
                  "charOffset": 1785,
                  "charLength": 11,
                  "snippet": {
                    "text": "strlen(str)",
                    "rendered": {
                      "text": "strlen(str)",
                      "markdown": "`strlen(str)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/uv/address.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1785,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strlen_s(str, <size of str>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/uv/address.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1785,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strnlen(str, <size of str>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e1262021-57cf-4cef-b4b2-c515cfb2cb4a",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_halving_doubling.h"
                },
                "region": {
                  "startLine": 345,
                  "startColumn": 6,
                  "endLine": 345,
                  "endColumn": 40,
                  "charOffset": 12597,
                  "charLength": 34,
                  "snippet": {
                    "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                    "rendered": {
                      "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                      "markdown": "`memcpy(ptrs_[i], ptrs_[0], bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_halving_doubling.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12597,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptrs_[i], <size of ptrs_[i]>,  ptrs_[0],  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-fa730572-d2b4-49f2-8415-b24fe9d433ef",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_halving_doubling.h"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 8,
                  "endLine": 334,
                  "endColumn": 38,
                  "charOffset": 12197,
                  "charLength": 123,
                  "snippet": {
                    "text": "memcpy(\n            &ptrs_[0][sendOffsets_[i]],\n            &recvBuf_[bufferOffset],\n            sendCounts_[i] * sizeof(T)",
                    "rendered": {
                      "text": "memcpy(\n            &ptrs_[0][sendOffsets_[i]],\n            &recvBuf_[bufferOffset],\n            sendCounts_[i] * sizeof(T)",
                      "markdown": "`memcpy(\n            &ptrs_[0][sendOffsets_[i]],\n            &recvBuf_[bufferOffset],\n            sendCounts_[i] * sizeof(T)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_halving_doubling.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12197,
                        "charLength": 123
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n            &ptrs_[0][sendOffsets_[i]], <size of \n            &ptrs_[0][sendOffsets_[i]]>, \n            &recvBuf_[bufferOffset], \n            sendCounts_[i] * sizeof(T)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2be07d59-eec0-400b-b172-78d6b5901355",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_halving_doubling.h"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 6,
                  "endLine": 304,
                  "endColumn": 38,
                  "charOffset": 11097,
                  "charLength": 110,
                  "snippet": {
                    "text": "memcpy(\n          &ptrs_[0][offset],\n          &recvBuf_[bufferOffset],\n          totalItemsToSend * sizeof(T)",
                    "rendered": {
                      "text": "memcpy(\n          &ptrs_[0][offset],\n          &recvBuf_[bufferOffset],\n          totalItemsToSend * sizeof(T)",
                      "markdown": "`memcpy(\n          &ptrs_[0][offset],\n          &recvBuf_[bufferOffset],\n          totalItemsToSend * sizeof(T)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_halving_doubling.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11097,
                        "charLength": 110
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n          &ptrs_[0][offset], <size of \n          &ptrs_[0][offset]>, \n          &recvBuf_[bufferOffset], \n          totalItemsToSend * sizeof(T)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e9f40b47-d310-4310-9ac5-e3911a0523c0",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/uv/address.cc"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 2,
                  "endLine": 37,
                  "endColumn": 44,
                  "charOffset": 863,
                  "charLength": 42,
                  "snippet": {
                    "text": "memcpy(bytes.data(), &impl_, sizeof(impl_)",
                    "rendered": {
                      "text": "memcpy(bytes.data(), &impl_, sizeof(impl_)",
                      "markdown": "`memcpy(bytes.data(), &impl_, sizeof(impl_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/uv/address.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 863,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "memcpy_s(bytes.data(), <size of bytes.data()>,  &impl_,  sizeof(impl_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-5f73621e-04b8-4854-b0ce-be0383a57356",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/common/linux.cc"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 2,
                  "endLine": 255,
                  "endColumn": 43,
                  "charOffset": 6233,
                  "charLength": 41,
                  "snippet": {
                    "text": "memcpy(ifr.ifr_name, ifname.c_str(), len)",
                    "rendered": {
                      "text": "memcpy(ifr.ifr_name, ifname.c_str(), len)",
                      "markdown": "`memcpy(ifr.ifr_name, ifname.c_str(), len)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/common/linux.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6233,
                        "charLength": 41
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ifr.ifr_name, <size of ifr.ifr_name>,  ifname.c_str(),  len)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-49e27cd5-0f7a-4c9e-a8bb-1f7faf1850ca",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/uv/address.cc"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 2,
                  "endLine": 28,
                  "endColumn": 44,
                  "charOffset": 598,
                  "charLength": 42,
                  "snippet": {
                    "text": "memcpy(&impl_, bytes.data(), sizeof(impl_)",
                    "rendered": {
                      "text": "memcpy(&impl_, bytes.data(), sizeof(impl_)",
                      "markdown": "`memcpy(&impl_, bytes.data(), sizeof(impl_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/uv/address.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 598,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&impl_, <size of &impl_>,  bytes.data(),  sizeof(impl_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-a025eb41-2c23-4361-b7b2-ae1659412652",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/gatherv.cc"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 10,
                  "endLine": 97,
                  "endColumn": 23,
                  "charOffset": 2799,
                  "charLength": 107,
                  "snippet": {
                    "text": "memcpy(\n              static_cast<char*>(out->ptr) + offset,\n              in->ptr,\n              in->size)",
                    "rendered": {
                      "text": "memcpy(\n              static_cast<char*>(out->ptr) + offset,\n              in->ptr,\n              in->size)",
                      "markdown": "`memcpy(\n              static_cast<char*>(out->ptr) + offset,\n              in->ptr,\n              in->size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/gatherv.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2799,
                        "charLength": 107
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n              static_cast<char*>(out->ptr) + offset, <size of \n              static_cast<char*>(out->ptr) + offset>, \n              in->ptr, \n              in->size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-44ac7dd5-2430-471f-8c27-1c8a66d35e33",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/looks_like_mpi.cc"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 49,
                  "endLine": 199,
                  "endColumn": 58,
                  "charOffset": 4735,
                  "charLength": 9,
                  "snippet": {
                    "text": "localhost",
                    "rendered": {
                      "text": "localhost",
                      "markdown": "`localhost`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-10c21cea-0e09-4561-ad2a-021eed43a1c1",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/broadcast_one_to_all.h"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 6,
                  "endLine": 110,
                  "endColumn": 55,
                  "charOffset": 3097,
                  "charLength": 49,
                  "snippet": {
                    "text": "memcpy(ptrs_[i], ptrs_[rootPointerRank_], bytes_)",
                    "rendered": {
                      "text": "memcpy(ptrs_[i], ptrs_[rootPointerRank_], bytes_)",
                      "markdown": "`memcpy(ptrs_[i], ptrs_[rootPointerRank_], bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/broadcast_one_to_all.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3097,
                        "charLength": 49
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptrs_[i], <size of ptrs_[i]>,  ptrs_[rootPointerRank_],  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e91ffdad-a84c-4156-bee4-d91b37d38aa7",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/example_allreduce.cc"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 40,
                  "endLine": 127,
                  "endColumn": 58,
                  "charOffset": 4543,
                  "charLength": 18,
                  "snippet": {
                    "text": "malloc(sizeof(int)",
                    "rendered": {
                      "text": "malloc(sizeof(int)",
                      "markdown": "`malloc(sizeof(int)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/examples/example_allreduce.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4543,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-acb1caca-88c1-4805-83c2-958970f2aac9",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/example_allreduce.cc"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 41,
                  "endLine": 130,
                  "endColumn": 59,
                  "charOffset": 4671,
                  "charLength": 18,
                  "snippet": {
                    "text": "malloc(sizeof(int)",
                    "rendered": {
                      "text": "malloc(sizeof(int)",
                      "markdown": "`malloc(sizeof(int)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/examples/example_allreduce.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4671,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-08bb5722-fe5c-4431-b2d7-121d093fc1f2",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/example_allreduce.cc"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 54,
                  "endLine": 86,
                  "endColumn": 63,
                  "charOffset": 2679,
                  "charLength": 9,
                  "snippet": {
                    "text": "localhost",
                    "rendered": {
                      "text": "localhost",
                      "markdown": "`localhost`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-fc1b50ca-49ca-47ce-91fe-39062694e64f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/example_allreduce.cc"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 44,
                  "endLine": 82,
                  "endColumn": 53,
                  "charOffset": 2492,
                  "charLength": 9,
                  "snippet": {
                    "text": "127.0.0.1",
                    "rendered": {
                      "text": "127.0.0.1",
                      "markdown": "`127.0.0.1`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-75c45dd2-21d7-44fc-8250-22a99e5a2139",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/example_allreduce.cc"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 15,
                  "endLine": 82,
                  "endColumn": 24,
                  "charOffset": 2463,
                  "charLength": 9,
                  "snippet": {
                    "text": "localhost",
                    "rendered": {
                      "text": "localhost",
                      "markdown": "`localhost`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-f7eec3ca-a196-4eab-921d-ff414a5d526b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/ibverbs/memory_region.cc"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 2,
                  "endLine": 30,
                  "endColumn": 33,
                  "charOffset": 745,
                  "charLength": 31,
                  "snippet": {
                    "text": "memcpy(&src_, src, sizeof(src_)",
                    "rendered": {
                      "text": "memcpy(&src_, src, sizeof(src_)",
                      "markdown": "`memcpy(&src_, src, sizeof(src_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/ibverbs/memory_region.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 745,
                        "charLength": 31
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&src_, <size of &src_>,  src,  sizeof(src_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-c8635618-6eba-4c41-9321-cc9a6efed5b7",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/alltoallv.cc"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 2,
                  "endLine": 145,
                  "endColumn": 18,
                  "charOffset": 4678,
                  "charLength": 124,
                  "snippet": {
                    "text": "memcpy(\n      static_cast<char*>(out->ptr) + myOutOffset,\n      static_cast<char*>(in->ptr) + myInOffset,\n      myChunkSize)",
                    "rendered": {
                      "text": "memcpy(\n      static_cast<char*>(out->ptr) + myOutOffset,\n      static_cast<char*>(in->ptr) + myInOffset,\n      myChunkSize)",
                      "markdown": "`memcpy(\n      static_cast<char*>(out->ptr) + myOutOffset,\n      static_cast<char*>(in->ptr) + myInOffset,\n      myChunkSize)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/alltoallv.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4678,
                        "charLength": 124
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n      static_cast<char*>(out->ptr) + myOutOffset, <size of \n      static_cast<char*>(out->ptr) + myOutOffset>, \n      static_cast<char*>(in->ptr) + myInOffset, \n      myChunkSize)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-4e56368f-a3f3-464c-9245-c62bbe54a35e",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_ring.h"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 6,
                  "endLine": 111,
                  "endColumn": 40,
                  "charOffset": 3014,
                  "charLength": 34,
                  "snippet": {
                    "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                    "rendered": {
                      "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                      "markdown": "`memcpy(ptrs_[i], ptrs_[0], bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_ring.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3014,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptrs_[i], <size of ptrs_[i]>,  ptrs_[0],  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-0f2d19e6-a515-4f3e-a7af-0448c1867736",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_ring.h"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 8,
                  "endLine": 98,
                  "endColumn": 39,
                  "charOffset": 2657,
                  "charLength": 31,
                  "snippet": {
                    "text": "memcpy(outbox_, inbox_, bytes_)",
                    "rendered": {
                      "text": "memcpy(outbox_, inbox_, bytes_)",
                      "markdown": "`memcpy(outbox_, inbox_, bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_ring.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2657,
                        "charLength": 31
                      },
                      "insertedContent": {
                        "text": "memcpy_s(outbox_, <size of outbox_>,  inbox_,  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b8ca19f6-62d7-49c1-8f0c-99dc3b3a30b4",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_ring.h"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 30,
                  "endLine": 33,
                  "endColumn": 44,
                  "charOffset": 804,
                  "charLength": 14,
                  "snippet": {
                    "text": "malloc(bytes_)",
                    "rendered": {
                      "text": "malloc(bytes_)",
                      "markdown": "`malloc(bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_ring.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 804,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-7385283e-9766-479c-8daa-b3f6edc49910",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_ring.h"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 4,
                  "endLine": 80,
                  "endColumn": 37,
                  "charOffset": 2129,
                  "charLength": 33,
                  "snippet": {
                    "text": "memcpy(outbox_, ptrs_[0], bytes_)",
                    "rendered": {
                      "text": "memcpy(outbox_, ptrs_[0], bytes_)",
                      "markdown": "`memcpy(outbox_, ptrs_[0], bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_ring.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2129,
                        "charLength": 33
                      },
                      "insertedContent": {
                        "text": "memcpy_s(outbox_, <size of outbox_>,  ptrs_[0],  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-204654ee-f7c5-4056-8ac8-b96ac8890fbe",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_ring.h"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 29,
                  "endLine": 32,
                  "endColumn": 43,
                  "charOffset": 757,
                  "charLength": 14,
                  "snippet": {
                    "text": "malloc(bytes_)",
                    "rendered": {
                      "text": "malloc(bytes_)",
                      "markdown": "`malloc(bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_ring.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 757,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-81ff5e3d-90ff-4c77-9ba9-4db18e9d0e85",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/ibverbs/address.cc"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 2,
                  "endLine": 32,
                  "endColumn": 44,
                  "charOffset": 688,
                  "charLength": 42,
                  "snippet": {
                    "text": "memcpy(bytes.data(), &addr_, sizeof(addr_)",
                    "rendered": {
                      "text": "memcpy(bytes.data(), &addr_, sizeof(addr_)",
                      "markdown": "`memcpy(bytes.data(), &addr_, sizeof(addr_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/ibverbs/address.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 688,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "memcpy_s(bytes.data(), <size of bytes.data()>,  &addr_,  sizeof(addr_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-7e122eea-5d3b-4d79-98e8-86ee2fa6337b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/example_reduce.cc"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 47,
                  "endLine": 124,
                  "endColumn": 65,
                  "charOffset": 4501,
                  "charLength": 18,
                  "snippet": {
                    "text": "malloc(sizeof(int)",
                    "rendered": {
                      "text": "malloc(sizeof(int)",
                      "markdown": "`malloc(sizeof(int)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/examples/example_reduce.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4501,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b8bebc17-d210-4d81-9677-d6bf08eaaa0b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/ibverbs/address.cc"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 2,
                  "endLine": 27,
                  "endColumn": 44,
                  "charOffset": 553,
                  "charLength": 42,
                  "snippet": {
                    "text": "memcpy(&addr_, bytes.data(), sizeof(addr_)",
                    "rendered": {
                      "text": "memcpy(&addr_, bytes.data(), sizeof(addr_)",
                      "markdown": "`memcpy(&addr_, bytes.data(), sizeof(addr_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/ibverbs/address.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 553,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&addr_, <size of &addr_>,  bytes.data(),  sizeof(addr_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-42a5ca94-e1f8-419f-b18c-2a8396f0be19",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/example_reduce.cc"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 46,
                  "endLine": 123,
                  "endColumn": 64,
                  "charOffset": 4428,
                  "charLength": 18,
                  "snippet": {
                    "text": "malloc(sizeof(int)",
                    "rendered": {
                      "text": "malloc(sizeof(int)",
                      "markdown": "`malloc(sizeof(int)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/examples/example_reduce.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 4428,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b3679f37-42eb-49ee-8651-50a412318397",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/example_reduce.cc"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 54,
                  "endLine": 86,
                  "endColumn": 63,
                  "charOffset": 2694,
                  "charLength": 9,
                  "snippet": {
                    "text": "localhost",
                    "rendered": {
                      "text": "localhost",
                      "markdown": "`localhost`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-1d16d92d-e9df-4b37-94d9-627252b83360",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/example_reduce.cc"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 44,
                  "endLine": 82,
                  "endColumn": 53,
                  "charOffset": 2507,
                  "charLength": 9,
                  "snippet": {
                    "text": "127.0.0.1",
                    "rendered": {
                      "text": "127.0.0.1",
                      "markdown": "`127.0.0.1`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-228c1880-ed3a-4f21-a78f-a0c56671914b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/example_reduce.cc"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 15,
                  "endLine": 82,
                  "endColumn": 24,
                  "charOffset": 2478,
                  "charLength": 9,
                  "snippet": {
                    "text": "localhost",
                    "rendered": {
                      "text": "localhost",
                      "markdown": "`localhost`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-1ca8ca14-085c-4686-93a7-7d8283405359",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/reduce.cc"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 6,
                  "endLine": 56,
                  "endColumn": 65,
                  "charOffset": 1777,
                  "charLength": 59,
                  "snippet": {
                    "text": "memcpy(out->ptr, in->ptr, opts.elements * opts.elementSize)",
                    "rendered": {
                      "text": "memcpy(out->ptr, in->ptr, opts.elements * opts.elementSize)",
                      "markdown": "`memcpy(out->ptr, in->ptr, opts.elements * opts.elementSize)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/reduce.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1777,
                        "charLength": 59
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out->ptr, <size of out->ptr>,  in->ptr,  opts.elements * opts.elementSize)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-645d88f5-946b-4ce4-9b71-7024356be198",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/example1.cc"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 44,
                  "endLine": 67,
                  "endColumn": 53,
                  "charOffset": 2069,
                  "charLength": 9,
                  "snippet": {
                    "text": "127.0.0.1",
                    "rendered": {
                      "text": "127.0.0.1",
                      "markdown": "`127.0.0.1`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-4d852780-9ef3-4573-b7e6-7ecc39833019",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/example1.cc"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 54,
                  "endLine": 71,
                  "endColumn": 63,
                  "charOffset": 2256,
                  "charLength": 9,
                  "snippet": {
                    "text": "localhost",
                    "rendered": {
                      "text": "localhost",
                      "markdown": "`localhost`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-920685fc-3be1-4f5a-8684-e6e3dc50e0e9",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/examples/example1.cc"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 15,
                  "endLine": 67,
                  "endColumn": 24,
                  "charOffset": 2040,
                  "charLength": 9,
                  "snippet": {
                    "text": "localhost",
                    "rendered": {
                      "text": "localhost",
                      "markdown": "`localhost`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-d2e9c58a-ba92-4cb2-a1a9-8a1fc6e35ca6",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allgather_ring.h"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 6,
                  "endLine": 63,
                  "endColumn": 76,
                  "charOffset": 1999,
                  "charLength": 70,
                  "snippet": {
                    "text": "memcpy(outPtr_ + rank * inputStride_ + i * count_, inPtrs_[i], bytes_)",
                    "rendered": {
                      "text": "memcpy(outPtr_ + rank * inputStride_ + i * count_, inPtrs_[i], bytes_)",
                      "markdown": "`memcpy(outPtr_ + rank * inputStride_ + i * count_, inPtrs_[i], bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allgather_ring.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1999,
                        "charLength": 70
                      },
                      "insertedContent": {
                        "text": "memcpy_s(outPtr_ + rank * inputStride_ + i * count_, <size of outPtr_ + rank * inputStride_ + i * count_>,  inPtrs_[i],  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ccb3cd74-f879-40c8-ad84-1e9b2c7a191d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/broadcast.cc"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 4,
                  "endLine": 88,
                  "endColumn": 40,
                  "charOffset": 2621,
                  "charLength": 36,
                  "snippet": {
                    "text": "memcpy(out->ptr, in->ptr, out->size)",
                    "rendered": {
                      "text": "memcpy(out->ptr, in->ptr, out->size)",
                      "markdown": "`memcpy(out->ptr, in->ptr, out->size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/broadcast.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2621,
                        "charLength": 36
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out->ptr, <size of out->ptr>,  in->ptr,  out->size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-3589c5ba-fba9-4428-999d-4612a7c58d66",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/reduce_scatter.h"
                },
                "region": {
                  "startLine": 426,
                  "startColumn": 6,
                  "endLine": 426,
                  "endColumn": 40,
                  "charOffset": 15530,
                  "charLength": 34,
                  "snippet": {
                    "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                    "rendered": {
                      "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                      "markdown": "`memcpy(ptrs_[i], ptrs_[0], bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/reduce_scatter.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 15530,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptrs_[i], <size of ptrs_[i]>,  ptrs_[0],  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-0871696e-9061-4a11-9593-b2a78ca2a79b",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/ibverbs/pair.cc"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 22,
                  "endLine": 101,
                  "endColumn": 27,
                  "charOffset": 2918,
                  "charLength": 5,
                  "snippet": {
                    "text": "rand(",
                    "rendered": {
                      "text": "rand(",
                      "markdown": "`rand(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-b6c29c77-ce3e-40bd-950d-66d6e4f11c05",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/reduce_scatter.h"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 10,
                  "endLine": 418,
                  "endColumn": 43,
                  "charOffset": 15253,
                  "charLength": 131,
                  "snippet": {
                    "text": "memcpy(\n              &ptrs_[0][bufferOffset],\n              &ptrs_[0][distMap.offset],\n              distMap.itemCount * sizeof(T)",
                    "rendered": {
                      "text": "memcpy(\n              &ptrs_[0][bufferOffset],\n              &ptrs_[0][distMap.offset],\n              distMap.itemCount * sizeof(T)",
                      "markdown": "`memcpy(\n              &ptrs_[0][bufferOffset],\n              &ptrs_[0][distMap.offset],\n              distMap.itemCount * sizeof(T)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/reduce_scatter.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 15253,
                        "charLength": 131
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n              &ptrs_[0][bufferOffset], <size of \n              &ptrs_[0][bufferOffset]>, \n              &ptrs_[0][distMap.offset], \n              distMap.itemCount * sizeof(T)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-862229cc-f1e4-4c4b-8897-51082a33f4e9",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/reduce_scatter.h"
                },
                "region": {
                  "startLine": 408,
                  "startColumn": 8,
                  "endLine": 411,
                  "endColumn": 41,
                  "charOffset": 14973,
                  "charLength": 129,
                  "snippet": {
                    "text": "memcpy(\n            &ptrs_[0][bufferOffset],\n            &recvBufDist_[distMap.offset],\n            distMap.itemCount * sizeof(T)",
                    "rendered": {
                      "text": "memcpy(\n            &ptrs_[0][bufferOffset],\n            &recvBufDist_[distMap.offset],\n            distMap.itemCount * sizeof(T)",
                      "markdown": "`memcpy(\n            &ptrs_[0][bufferOffset],\n            &recvBufDist_[distMap.offset],\n            distMap.itemCount * sizeof(T)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/reduce_scatter.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 14973,
                        "charLength": 129
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n            &ptrs_[0][bufferOffset], <size of \n            &ptrs_[0][bufferOffset]>, \n            &recvBufDist_[distMap.offset], \n            distMap.itemCount * sizeof(T)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d2799616-0c35-46f8-9cd6-6e7ca8fe19e6",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/cuda_private.h"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 19,
                  "endLine": 84,
                  "endColumn": 27,
                  "charOffset": 2284,
                  "charLength": 8,
                  "snippet": {
                    "text": "rand() %",
                    "rendered": {
                      "text": "rand() %",
                      "markdown": "`rand() %`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-033c675a-bcf3-4c34-87e3-bd41ad51890e",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/reduce_scatter.h"
                },
                "region": {
                  "startLine": 333,
                  "startColumn": 8,
                  "endLine": 333,
                  "endColumn": 42,
                  "charOffset": 12310,
                  "charLength": 34,
                  "snippet": {
                    "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                    "rendered": {
                      "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                      "markdown": "`memcpy(ptrs_[i], ptrs_[0], bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/reduce_scatter.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12310,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptrs_[i], <size of ptrs_[i]>,  ptrs_[0],  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2a31fe8f-7db2-43d1-9d80-f06de3611966",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/alltoall.cc"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 2,
                  "endLine": 40,
                  "endColumn": 16,
                  "charOffset": 992,
                  "charLength": 137,
                  "snippet": {
                    "text": "memcpy(\n      static_cast<char*>(out->ptr) + myRank * chunkSize,\n      static_cast<char*>(in->ptr) + myRank * chunkSize,\n      chunkSize)",
                    "rendered": {
                      "text": "memcpy(\n      static_cast<char*>(out->ptr) + myRank * chunkSize,\n      static_cast<char*>(in->ptr) + myRank * chunkSize,\n      chunkSize)",
                      "markdown": "`memcpy(\n      static_cast<char*>(out->ptr) + myRank * chunkSize,\n      static_cast<char*>(in->ptr) + myRank * chunkSize,\n      chunkSize)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/alltoall.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 992,
                        "charLength": 137
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n      static_cast<char*>(out->ptr) + myRank * chunkSize, <size of \n      static_cast<char*>(out->ptr) + myRank * chunkSize>, \n      static_cast<char*>(in->ptr) + myRank * chunkSize, \n      chunkSize)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-59255250-91b9-41e4-9864-fbe2de464ffe",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/cuda_private.h"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 19,
                  "endLine": 84,
                  "endColumn": 24,
                  "charOffset": 2284,
                  "charLength": 5,
                  "snippet": {
                    "text": "rand(",
                    "rendered": {
                      "text": "rand(",
                      "markdown": "`rand(`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-4f696fe7-bb53-46fe-be3a-bdbc99f64149",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce.cc"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 8,
                  "endLine": 55,
                  "endColumn": 19,
                  "charOffset": 1584,
                  "charLength": 146,
                  "snippet": {
                    "text": "memcpy(\n            static_cast<uint8_t*>(out[0]->ptr) + offset,\n            static_cast<const uint8_t*>(in[0]->ptr) + offset,\n            length)",
                    "rendered": {
                      "text": "memcpy(\n            static_cast<uint8_t*>(out[0]->ptr) + offset,\n            static_cast<const uint8_t*>(in[0]->ptr) + offset,\n            length)",
                      "markdown": "`memcpy(\n            static_cast<uint8_t*>(out[0]->ptr) + offset,\n            static_cast<const uint8_t*>(in[0]->ptr) + offset,\n            length)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1584,
                        "charLength": 146
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n            static_cast<uint8_t*>(out[0]->ptr) + offset, <size of \n            static_cast<uint8_t*>(out[0]->ptr) + offset>, \n            static_cast<const uint8_t*>(in[0]->ptr) + offset, \n            length)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-bcfb38cb-3615-44ac-930f-38e4936eccfc",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce.cc"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 6,
                  "endLine": 92,
                  "endColumn": 17,
                  "charOffset": 3041,
                  "charLength": 141,
                  "snippet": {
                    "text": "memcpy(\n          static_cast<uint8_t*>(out[i]->ptr) + offset,\n          static_cast<const uint8_t*>(out[0]->ptr) + offset,\n          length)",
                    "rendered": {
                      "text": "memcpy(\n          static_cast<uint8_t*>(out[i]->ptr) + offset,\n          static_cast<const uint8_t*>(out[0]->ptr) + offset,\n          length)",
                      "markdown": "`memcpy(\n          static_cast<uint8_t*>(out[i]->ptr) + offset,\n          static_cast<const uint8_t*>(out[0]->ptr) + offset,\n          length)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3041,
                        "charLength": 141
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n          static_cast<uint8_t*>(out[i]->ptr) + offset, <size of \n          static_cast<uint8_t*>(out[i]->ptr) + offset>, \n          static_cast<const uint8_t*>(out[0]->ptr) + offset, \n          length)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-30641cce-eed5-4720-86f5-ec5e5ef48ec8",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_bcube.h"
                },
                "region": {
                  "startLine": 423,
                  "startColumn": 6,
                  "endLine": 423,
                  "endColumn": 40,
                  "charOffset": 14800,
                  "charLength": 34,
                  "snippet": {
                    "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                    "rendered": {
                      "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                      "markdown": "`memcpy(ptrs_[i], ptrs_[0], bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_bcube.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 14800,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptrs_[i], <size of ptrs_[i]>,  ptrs_[0],  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-54540ba5-9517-4944-be55-6143a0db5d02",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_bcube.h"
                },
                "region": {
                  "startLine": 405,
                  "startColumn": 13,
                  "endLine": 408,
                  "endColumn": 33,
                  "charOffset": 14249,
                  "charLength": 124,
                  "snippet": {
                    "text": "memcpy(\n            &ptrs_[0][ptrOffset],\n            &recvBufs_[recvBufIdx_[srcRank]][0],\n            recvCount * sizeof(T)",
                    "rendered": {
                      "text": "memcpy(\n            &ptrs_[0][ptrOffset],\n            &recvBufs_[recvBufIdx_[srcRank]][0],\n            recvCount * sizeof(T)",
                      "markdown": "`memcpy(\n            &ptrs_[0][ptrOffset],\n            &recvBufs_[recvBufIdx_[srcRank]][0],\n            recvCount * sizeof(T)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_bcube.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 14249,
                        "charLength": 124
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n            &ptrs_[0][ptrOffset], <size of \n            &ptrs_[0][ptrOffset]>, \n            &recvBufs_[recvBufIdx_[srcRank]][0], \n            recvCount * sizeof(T)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2d109d22-3793-4bbc-b88b-66bc7a5f3497",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_bcube.h"
                },
                "region": {
                  "startLine": 350,
                  "startColumn": 8,
                  "endLine": 350,
                  "endColumn": 42,
                  "charOffset": 12135,
                  "charLength": 34,
                  "snippet": {
                    "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                    "rendered": {
                      "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                      "markdown": "`memcpy(ptrs_[i], ptrs_[0], bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_bcube.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 12135,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptrs_[i], <size of ptrs_[i]>,  ptrs_[0],  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-fdec64ca-eab8-4827-8b41-adba3350ca92",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/benchmark/options.cc"
                },
                "region": {
                  "startLine": 344,
                  "startColumn": 44,
                  "endLine": 344,
                  "endColumn": 58,
                  "charOffset": 10528,
                  "charLength": 14,
                  "snippet": {
                    "text": "strlen(optarg)",
                    "rendered": {
                      "text": "strlen(optarg)",
                      "markdown": "`strlen(optarg)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10528,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strlen_s(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10528,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strnlen(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-64e5754e-3630-4bdf-b479-54f378a23bf5",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/benchmark/options.cc"
                },
                "region": {
                  "startLine": 339,
                  "startColumn": 44,
                  "endLine": 339,
                  "endColumn": 58,
                  "charOffset": 10404,
                  "charLength": 14,
                  "snippet": {
                    "text": "strlen(optarg)",
                    "rendered": {
                      "text": "strlen(optarg)",
                      "markdown": "`strlen(optarg)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10404,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strlen_s(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10404,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strnlen(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-6abbd0f1-5388-4203-b04e-e62c1ca66b4d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/benchmark/options.cc"
                },
                "region": {
                  "startLine": 334,
                  "startColumn": 42,
                  "endLine": 334,
                  "endColumn": 56,
                  "charOffset": 10280,
                  "charLength": 14,
                  "snippet": {
                    "text": "strlen(optarg)",
                    "rendered": {
                      "text": "strlen(optarg)",
                      "markdown": "`strlen(optarg)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10280,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strlen_s(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10280,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strnlen(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-db0093b6-95d2-4fe2-9e9a-25b6596fc329",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/benchmark/options.cc"
                },
                "region": {
                  "startLine": 329,
                  "startColumn": 42,
                  "endLine": 329,
                  "endColumn": 56,
                  "charOffset": 10161,
                  "charLength": 14,
                  "snippet": {
                    "text": "strlen(optarg)",
                    "rendered": {
                      "text": "strlen(optarg)",
                      "markdown": "`strlen(optarg)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10161,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strlen_s(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10161,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strnlen(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-15c1b349-faff-46bd-bcb6-3e805f70c7f2",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/benchmark/options.cc"
                },
                "region": {
                  "startLine": 319,
                  "startColumn": 48,
                  "endLine": 319,
                  "endColumn": 62,
                  "charOffset": 9938,
                  "charLength": 14,
                  "snippet": {
                    "text": "strlen(optarg)",
                    "rendered": {
                      "text": "strlen(optarg)",
                      "markdown": "`strlen(optarg)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9938,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strlen_s(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9938,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strnlen(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-955c940a-9771-4906-a019-3c2eff22a619",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/benchmark/options.cc"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 44,
                  "endLine": 209,
                  "endColumn": 58,
                  "charOffset": 7487,
                  "charLength": 14,
                  "snippet": {
                    "text": "strlen(optarg)",
                    "rendered": {
                      "text": "strlen(optarg)",
                      "markdown": "`strlen(optarg)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7487,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strlen_s(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7487,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strnlen(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-26b25c3b-c89c-411d-8cbc-e125e6902ced",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/benchmark/options.cc"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 47,
                  "endLine": 201,
                  "endColumn": 61,
                  "charOffset": 7303,
                  "charLength": 14,
                  "snippet": {
                    "text": "strlen(optarg)",
                    "rendered": {
                      "text": "strlen(optarg)",
                      "markdown": "`strlen(optarg)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7303,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strlen_s(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7303,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strnlen(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-19bc5540-f516-420b-b672-9c2202440ad4",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/benchmark/options.cc"
                },
                "region": {
                  "startLine": 213,
                  "startColumn": 47,
                  "endLine": 213,
                  "endColumn": 61,
                  "charOffset": 7592,
                  "charLength": 14,
                  "snippet": {
                    "text": "strlen(optarg)",
                    "rendered": {
                      "text": "strlen(optarg)",
                      "markdown": "`strlen(optarg)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7592,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strlen_s(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/benchmark/options.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7592,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "strnlen(optarg, <size of optarg>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ded37913-6ed9-4a82-aec6-c59d778a566c",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/device.cc"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 4,
                  "endLine": 119,
                  "endColumn": 54,
                  "charOffset": 3267,
                  "charLength": 50,
                  "snippet": {
                    "text": "memcpy(&attr.ai_addr, rp->ai_addr, rp->ai_addrlen)",
                    "rendered": {
                      "text": "memcpy(&attr.ai_addr, rp->ai_addr, rp->ai_addrlen)",
                      "markdown": "`memcpy(&attr.ai_addr, rp->ai_addr, rp->ai_addrlen)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/tcp/device.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3267,
                        "charLength": 50
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&attr.ai_addr, <size of &attr.ai_addr>,  rp->ai_addr,  rp->ai_addrlen)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2ddf2356-b363-426c-a51e-2f1ab291d343",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/device.cc"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 8,
                  "endLine": 71,
                  "endColumn": 61,
                  "charOffset": 1994,
                  "charLength": 53,
                  "snippet": {
                    "text": "memcpy(&attr.ai_addr, ifa->ifa_addr, attr.ai_addrlen)",
                    "rendered": {
                      "text": "memcpy(&attr.ai_addr, ifa->ifa_addr, attr.ai_addrlen)",
                      "markdown": "`memcpy(&attr.ai_addr, ifa->ifa_addr, attr.ai_addrlen)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/tcp/device.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1994,
                        "charLength": 53
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&attr.ai_addr, <size of &attr.ai_addr>,  ifa->ifa_addr,  attr.ai_addrlen)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2936bfa9-3b4f-457a-bed8-f8a7b8d841fb",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/device.cc"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 8,
                  "endLine": 56,
                  "endColumn": 61,
                  "charOffset": 1518,
                  "charLength": 53,
                  "snippet": {
                    "text": "memcpy(&attr.ai_addr, ifa->ifa_addr, attr.ai_addrlen)",
                    "rendered": {
                      "text": "memcpy(&attr.ai_addr, ifa->ifa_addr, attr.ai_addrlen)",
                      "markdown": "`memcpy(&attr.ai_addr, ifa->ifa_addr, attr.ai_addrlen)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/tcp/device.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1518,
                        "charLength": 53
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&attr.ai_addr, <size of &attr.ai_addr>,  ifa->ifa_addr,  attr.ai_addrlen)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-212fc468-d330-4a00-b578-b23c81a57e27",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/device.cc"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 8,
                  "endLine": 49,
                  "endColumn": 61,
                  "charOffset": 1282,
                  "charLength": 53,
                  "snippet": {
                    "text": "memcpy(&attr.ai_addr, ifa->ifa_addr, attr.ai_addrlen)",
                    "rendered": {
                      "text": "memcpy(&attr.ai_addr, ifa->ifa_addr, attr.ai_addrlen)",
                      "markdown": "`memcpy(&attr.ai_addr, ifa->ifa_addr, attr.ai_addrlen)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/tcp/device.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1282,
                        "charLength": 53
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&attr.ai_addr, <size of &attr.ai_addr>,  ifa->ifa_addr,  attr.ai_addrlen)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-048a4c46-ec2b-413d-a260-dd6d10a567c7",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/cuda_collectives_native.h"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 9,
                  "endLine": 57,
                  "endColumn": 17,
                  "charOffset": 1698,
                  "charLength": 8,
                  "snippet": {
                    "text": "shuffle(",
                    "rendered": {
                      "text": "shuffle(",
                      "markdown": "`shuffle(`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-05793445-0bc3-40e3-af28-6c0ec013738d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/gather.cc"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 4,
                  "endLine": 47,
                  "endColumn": 18,
                  "charOffset": 1141,
                  "charLength": 111,
                  "snippet": {
                    "text": "memcpy(\n        static_cast<char*>(out->ptr) + (context->rank * chunkSize),\n        in->ptr,\n        chunkSize)",
                    "rendered": {
                      "text": "memcpy(\n        static_cast<char*>(out->ptr) + (context->rank * chunkSize),\n        in->ptr,\n        chunkSize)",
                      "markdown": "`memcpy(\n        static_cast<char*>(out->ptr) + (context->rank * chunkSize),\n        in->ptr,\n        chunkSize)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/gather.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1141,
                        "charLength": 111
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n        static_cast<char*>(out->ptr) + (context->rank * chunkSize), <size of \n        static_cast<char*>(out->ptr) + (context->rank * chunkSize)>, \n        in->ptr, \n        chunkSize)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-9e37b80e-4ff0-47b5-9cf0-67cdfa36e0c5",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allgather.cc"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 53,
                  "endColumn": 17,
                  "charOffset": 1654,
                  "charLength": 133,
                  "snippet": {
                    "text": "memcpy(\n        static_cast<uint8_t*>(out->ptr) + context->rank * in->size,\n        static_cast<uint8_t*>(in->ptr),\n        in->size)",
                    "rendered": {
                      "text": "memcpy(\n        static_cast<uint8_t*>(out->ptr) + context->rank * in->size,\n        static_cast<uint8_t*>(in->ptr),\n        in->size)",
                      "markdown": "`memcpy(\n        static_cast<uint8_t*>(out->ptr) + context->rank * in->size,\n        static_cast<uint8_t*>(in->ptr),\n        in->size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allgather.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1654,
                        "charLength": 133
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n        static_cast<uint8_t*>(out->ptr) + context->rank * in->size, <size of \n        static_cast<uint8_t*>(out->ptr) + context->rank * in->size>, \n        static_cast<uint8_t*>(in->ptr), \n        in->size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-51adfba1-6b73-457a-9f0d-13d5d0844120",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allgatherv.cc"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 6,
                  "endLine": 110,
                  "endColumn": 19,
                  "charOffset": 3465,
                  "charLength": 141,
                  "snippet": {
                    "text": "memcpy(\n          static_cast<uint8_t*>(out->ptr) + byteOffsets[context->rank],\n          static_cast<uint8_t*>(in->ptr),\n          in->size)",
                    "rendered": {
                      "text": "memcpy(\n          static_cast<uint8_t*>(out->ptr) + byteOffsets[context->rank],\n          static_cast<uint8_t*>(in->ptr),\n          in->size)",
                      "markdown": "`memcpy(\n          static_cast<uint8_t*>(out->ptr) + byteOffsets[context->rank],\n          static_cast<uint8_t*>(in->ptr),\n          in->size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allgatherv.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3465,
                        "charLength": 141
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n          static_cast<uint8_t*>(out->ptr) + byteOffsets[context->rank], <size of \n          static_cast<uint8_t*>(out->ptr) + byteOffsets[context->rank]>, \n          static_cast<uint8_t*>(in->ptr), \n          in->size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-afcb63d8-adb9-45d9-81c2-811f1fb2f7d3",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/scatter.cc"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 4,
                  "endLine": 48,
                  "endColumn": 55,
                  "charOffset": 1334,
                  "charLength": 51,
                  "snippet": {
                    "text": "memcpy(out->ptr, in[context->rank]->ptr, out->size)",
                    "rendered": {
                      "text": "memcpy(out->ptr, in[context->rank]->ptr, out->size)",
                      "markdown": "`memcpy(out->ptr, in[context->rank]->ptr, out->size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/scatter.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1334,
                        "charLength": 51
                      },
                      "insertedContent": {
                        "text": "memcpy_s(out->ptr, <size of out->ptr>,  in[context->rank]->ptr,  out->size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-0ab8f513-954f-4635-9dd1-253371ead900",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/address.cc"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 2,
                  "endLine": 55,
                  "endColumn": 44,
                  "charOffset": 1343,
                  "charLength": 42,
                  "snippet": {
                    "text": "memcpy(bytes.data(), &impl_, sizeof(impl_)",
                    "rendered": {
                      "text": "memcpy(bytes.data(), &impl_, sizeof(impl_)",
                      "markdown": "`memcpy(bytes.data(), &impl_, sizeof(impl_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/tcp/address.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1343,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "memcpy_s(bytes.data(), <size of bytes.data()>,  &impl_,  sizeof(impl_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-96dbaa3d-8405-41b1-9cc0-14afb45de7cb",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/address.cc"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 2,
                  "endLine": 46,
                  "endColumn": 44,
                  "charOffset": 1078,
                  "charLength": 42,
                  "snippet": {
                    "text": "memcpy(&impl_, bytes.data(), sizeof(impl_)",
                    "rendered": {
                      "text": "memcpy(&impl_, bytes.data(), sizeof(impl_)",
                      "markdown": "`memcpy(&impl_, bytes.data(), sizeof(impl_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/tcp/address.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1078,
                        "charLength": 42
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&impl_, <size of &impl_>,  bytes.data(),  sizeof(impl_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-541f4c8e-80fe-4f62-87cc-22158ad053f2",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/address.cc"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 15,
                  "endLine": 76,
                  "endColumn": 26,
                  "charOffset": 1986,
                  "charLength": 11,
                  "snippet": {
                    "text": "strlen(str)",
                    "rendered": {
                      "text": "strlen(str)",
                      "markdown": "`strlen(str)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/tcp/address.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1986,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strlen_s(str, <size of str>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/tcp/address.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1986,
                        "charLength": 11
                      },
                      "insertedContent": {
                        "text": "strnlen(str, <size of str>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-8efeb118-8035-499a-bff9-4116d6b26e14",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/address.cc"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 2,
                  "endLine": 27,
                  "endColumn": 34,
                  "charOffset": 592,
                  "charLength": 32,
                  "snippet": {
                    "text": "memcpy(&impl_.ss, addr, addrlen)",
                    "rendered": {
                      "text": "memcpy(&impl_.ss, addr, addrlen)",
                      "markdown": "`memcpy(&impl_.ss, addr, addrlen)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/transport/tcp/address.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 592,
                        "charLength": 32
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&impl_.ss, <size of &impl_.ss>,  addr,  addrlen)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-6dedf95f-3de7-4df3-8622-01de532b4dbc",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_ring_chunked.h"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 6,
                  "endLine": 210,
                  "endColumn": 40,
                  "charOffset": 6946,
                  "charLength": 34,
                  "snippet": {
                    "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                    "rendered": {
                      "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                      "markdown": "`memcpy(ptrs_[i], ptrs_[0], bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_ring_chunked.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6946,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptrs_[i], <size of ptrs_[i]>,  ptrs_[0],  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e58264f1-86fc-452e-b20e-2490ced4a5ed",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Win32 - Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/openssl.h"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 5,
                  "endLine": 32,
                  "endColumn": 31,
                  "charOffset": 773,
                  "charLength": 26,
                  "snippet": {
                    "text": "SSL_CTX_set_security_level",
                    "rendered": {
                      "text": "SSL_CTX_set_security_level",
                      "markdown": "`SSL_CTX_set_security_level`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-fe064fc6-b053-4e22-84d0-918c54a12c1f",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Win32 - Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/openssl.h"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 9,
                  "endLine": 22,
                  "endColumn": 20,
                  "charOffset": 501,
                  "charLength": 11,
                  "snippet": {
                    "text": "SSL_CTX_new",
                    "rendered": {
                      "text": "SSL_CTX_new",
                      "markdown": "`SSL_CTX_new`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-b40e58dd-95a4-4892-a16a-4f03037afaab",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Win32 - Hard-coded SSL/TLS Protocol"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/transport/tcp/tls/openssl.h"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 18,
                  "endLine": 20,
                  "endColumn": 28,
                  "charOffset": 473,
                  "charLength": 10,
                  "snippet": {
                    "text": "TLS_method",
                    "rendered": {
                      "text": "TLS_method",
                      "markdown": "`TLS_method`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.Protocol.TLS.Hard-Coded"
            ]
          }
        },
        {
          "ruleId": "glog-2c934ab9-2a74-489d-a04d-6865356867ce",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_ring_chunked.h"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 8,
                  "endLine": 96,
                  "endColumn": 42,
                  "charOffset": 2696,
                  "charLength": 34,
                  "snippet": {
                    "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                    "rendered": {
                      "text": "memcpy(ptrs_[i], ptrs_[0], bytes_)",
                      "markdown": "`memcpy(ptrs_[i], ptrs_[0], bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_ring_chunked.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2696,
                        "charLength": 34
                      },
                      "insertedContent": {
                        "text": "memcpy_s(ptrs_[i], <size of ptrs_[i]>,  ptrs_[0],  bytes_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-7b996e44-4f05-45cb-9eaf-a72ff75dbd37",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_ring_chunked.h"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 8,
                  "endLine": 184,
                  "endColumn": 77,
                  "charOffset": 6071,
                  "charLength": 69,
                  "snippet": {
                    "text": "memcpy(&ptrs_[0][offset], inbox_[chunkOffset & 1], length * sizeof(T)",
                    "rendered": {
                      "text": "memcpy(&ptrs_[0][offset], inbox_[chunkOffset & 1], length * sizeof(T)",
                      "markdown": "`memcpy(&ptrs_[0][offset], inbox_[chunkOffset & 1], length * sizeof(T)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_ring_chunked.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 6071,
                        "charLength": 69
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&ptrs_[0][offset], <size of &ptrs_[0][offset]>,  inbox_[chunkOffset & 1],  length * sizeof(T)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-208556f7-2750-483f-b3d8-ae37ab749301",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "gloo/allreduce_ring_chunked.h"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 34,
                  "endLine": 44,
                  "endColumn": 48,
                  "charOffset": 1206,
                  "charLength": 14,
                  "snippet": {
                    "text": "malloc(bytes_)",
                    "rendered": {
                      "text": "malloc(bytes_)",
                      "markdown": "`malloc(bytes_)`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "gloo/allreduce_ring_chunked.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1206,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}